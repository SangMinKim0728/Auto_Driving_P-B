
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004088  08004088  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004090  08004090  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08004098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000032c  080043c4  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  080043c4  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006970  00000000  00000000  00020355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001750  00000000  00000000  00026cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00028418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00028b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e374  00000000  00000000  00029220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081e1  00000000  00000000  00047594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac65e  00000000  00000000  0004f775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbdd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002550  00000000  00000000  000fbe24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000032c 	.word	0x2000032c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003e70 	.word	0x08003e70

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000330 	.word	0x20000330
 8000220:	08003e70 	.word	0x08003e70

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fd00 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f986 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 fa02 	bl	8000940 <MX_GPIO_Init>
  MX_UART4_Init();
 800053c:	f000 f9d6 	bl	80008ec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  Menu_Config();
 8000540:	f000 fa88 	bl	8000a54 <Menu_Config>
  HAL_UART_Receive_IT(&huart4, (uint8_t*)RxBuffer, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	499c      	ldr	r1, [pc, #624]	; (80007b8 <main+0x28c>)
 8000548:	489c      	ldr	r0, [pc, #624]	; (80007bc <main+0x290>)
 800054a:	f001 ff72 	bl	8002432 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if( final_flag == 1 )
 800054e:	4b9c      	ldr	r3, [pc, #624]	; (80007c0 <main+0x294>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	f040 8164 	bne.w	8000820 <main+0x2f4>
	{
		final_flag = 0;
 8000558:	4b99      	ldr	r3, [pc, #612]	; (80007c0 <main+0x294>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
		i = 0;
 800055e:	4b99      	ldr	r3, [pc, #612]	; (80007c4 <main+0x298>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
		printf("[%s]\n", msg);
 8000564:	4998      	ldr	r1, [pc, #608]	; (80007c8 <main+0x29c>)
 8000566:	4899      	ldr	r0, [pc, #612]	; (80007cc <main+0x2a0>)
 8000568:	f002 fbf2 	bl	8002d50 <iprintf>

		if(msg[cnt] == 'A') // Port A
 800056c:	4b98      	ldr	r3, [pc, #608]	; (80007d0 <main+0x2a4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b95      	ldr	r3, [pc, #596]	; (80007c8 <main+0x29c>)
 8000574:	5c9b      	ldrb	r3, [r3, r2]
 8000576:	2b41      	cmp	r3, #65	; 0x41
 8000578:	d109      	bne.n	800058e <main+0x62>
		{
			total_cnt++;
 800057a:	4b96      	ldr	r3, [pc, #600]	; (80007d4 <main+0x2a8>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b94      	ldr	r3, [pc, #592]	; (80007d4 <main+0x2a8>)
 8000584:	701a      	strb	r2, [r3, #0]
			gpio.GPIOx = GPIOA;
 8000586:	4b94      	ldr	r3, [pc, #592]	; (80007d8 <main+0x2ac>)
 8000588:	4a94      	ldr	r2, [pc, #592]	; (80007dc <main+0x2b0>)
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	e020      	b.n	80005d0 <main+0xa4>
			//printf("PortA\n");
		}
		else if(msg[cnt] == 'B') // Port B
 800058e:	4b90      	ldr	r3, [pc, #576]	; (80007d0 <main+0x2a4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	4b8c      	ldr	r3, [pc, #560]	; (80007c8 <main+0x29c>)
 8000596:	5c9b      	ldrb	r3, [r3, r2]
 8000598:	2b42      	cmp	r3, #66	; 0x42
 800059a:	d109      	bne.n	80005b0 <main+0x84>
		{
			total_cnt++;
 800059c:	4b8d      	ldr	r3, [pc, #564]	; (80007d4 <main+0x2a8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b8b      	ldr	r3, [pc, #556]	; (80007d4 <main+0x2a8>)
 80005a6:	701a      	strb	r2, [r3, #0]
			gpio.GPIOx = GPIOB;
 80005a8:	4b8b      	ldr	r3, [pc, #556]	; (80007d8 <main+0x2ac>)
 80005aa:	4a8d      	ldr	r2, [pc, #564]	; (80007e0 <main+0x2b4>)
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	e00f      	b.n	80005d0 <main+0xa4>
			//printf("PortB\n");
		}
		else if(msg[cnt] == 'C') // Port C
 80005b0:	4b87      	ldr	r3, [pc, #540]	; (80007d0 <main+0x2a4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b84      	ldr	r3, [pc, #528]	; (80007c8 <main+0x29c>)
 80005b8:	5c9b      	ldrb	r3, [r3, r2]
 80005ba:	2b43      	cmp	r3, #67	; 0x43
 80005bc:	d108      	bne.n	80005d0 <main+0xa4>
		{
			total_cnt++;
 80005be:	4b85      	ldr	r3, [pc, #532]	; (80007d4 <main+0x2a8>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b83      	ldr	r3, [pc, #524]	; (80007d4 <main+0x2a8>)
 80005c8:	701a      	strb	r2, [r3, #0]
			gpio.GPIOx = GPIOC;
 80005ca:	4b83      	ldr	r3, [pc, #524]	; (80007d8 <main+0x2ac>)
 80005cc:	4a85      	ldr	r2, [pc, #532]	; (80007e4 <main+0x2b8>)
 80005ce:	601a      	str	r2, [r3, #0]
			//printf("PortC\n");
		}

		cnt++;
 80005d0:	4b7f      	ldr	r3, [pc, #508]	; (80007d0 <main+0x2a4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b7d      	ldr	r3, [pc, #500]	; (80007d0 <main+0x2a4>)
 80005da:	701a      	strb	r2, [r3, #0]

		port_num = atoi(&msg[cnt]); // 문자열을 정수로 변환하여 num1에 할당
 80005dc:	4b7c      	ldr	r3, [pc, #496]	; (80007d0 <main+0x2a4>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b79      	ldr	r3, [pc, #484]	; (80007c8 <main+0x29c>)
 80005e4:	4413      	add	r3, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fb7c 	bl	8002ce4 <atoi>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a7e      	ldr	r2, [pc, #504]	; (80007e8 <main+0x2bc>)
 80005f0:	6013      	str	r3, [r2, #0]

		switch(port_num)
 80005f2:	4b7d      	ldr	r3, [pc, #500]	; (80007e8 <main+0x2bc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	f200 808e 	bhi.w	8000718 <main+0x1ec>
 80005fc:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <main+0xd8>)
 80005fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000602:	bf00      	nop
 8000604:	08000645 	.word	0x08000645
 8000608:	08000659 	.word	0x08000659
 800060c:	08000719 	.word	0x08000719
 8000610:	08000719 	.word	0x08000719
 8000614:	08000719 	.word	0x08000719
 8000618:	0800066d 	.word	0x0800066d
 800061c:	08000681 	.word	0x08000681
 8000620:	08000719 	.word	0x08000719
 8000624:	08000719 	.word	0x08000719
 8000628:	08000695 	.word	0x08000695
 800062c:	08000719 	.word	0x08000719
 8000630:	080006ab 	.word	0x080006ab
 8000634:	080006c1 	.word	0x080006c1
 8000638:	080006d7 	.word	0x080006d7
 800063c:	080006ed 	.word	0x080006ed
 8000640:	08000703 	.word	0x08000703
		{
		    case 0:
		    	total_cnt++;
 8000644:	4b63      	ldr	r3, [pc, #396]	; (80007d4 <main+0x2a8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b61      	ldr	r3, [pc, #388]	; (80007d4 <main+0x2a8>)
 800064e:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_0;
 8000650:	4b61      	ldr	r3, [pc, #388]	; (80007d8 <main+0x2ac>)
 8000652:	2201      	movs	r2, #1
 8000654:	809a      	strh	r2, [r3, #4]
		        break;
 8000656:	e063      	b.n	8000720 <main+0x1f4>
		    case 1:
		    	total_cnt++;
 8000658:	4b5e      	ldr	r3, [pc, #376]	; (80007d4 <main+0x2a8>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b5c      	ldr	r3, [pc, #368]	; (80007d4 <main+0x2a8>)
 8000662:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_1;
 8000664:	4b5c      	ldr	r3, [pc, #368]	; (80007d8 <main+0x2ac>)
 8000666:	2202      	movs	r2, #2
 8000668:	809a      	strh	r2, [r3, #4]
		    	break;
 800066a:	e059      	b.n	8000720 <main+0x1f4>
		    case 5:
		    	total_cnt++;
 800066c:	4b59      	ldr	r3, [pc, #356]	; (80007d4 <main+0x2a8>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b57      	ldr	r3, [pc, #348]	; (80007d4 <main+0x2a8>)
 8000676:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_5;
 8000678:	4b57      	ldr	r3, [pc, #348]	; (80007d8 <main+0x2ac>)
 800067a:	2220      	movs	r2, #32
 800067c:	809a      	strh	r2, [r3, #4]
		    	break;
 800067e:	e04f      	b.n	8000720 <main+0x1f4>
		    case 6:
		    	total_cnt++;
 8000680:	4b54      	ldr	r3, [pc, #336]	; (80007d4 <main+0x2a8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b52      	ldr	r3, [pc, #328]	; (80007d4 <main+0x2a8>)
 800068a:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_6;
 800068c:	4b52      	ldr	r3, [pc, #328]	; (80007d8 <main+0x2ac>)
 800068e:	2240      	movs	r2, #64	; 0x40
 8000690:	809a      	strh	r2, [r3, #4]
		    	break;
 8000692:	e045      	b.n	8000720 <main+0x1f4>
		    case 9:
		    	total_cnt++;
 8000694:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <main+0x2a8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <main+0x2a8>)
 800069e:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_9;
 80006a0:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <main+0x2ac>)
 80006a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a6:	809a      	strh	r2, [r3, #4]
		        break;
 80006a8:	e03a      	b.n	8000720 <main+0x1f4>
		    case 11:
		    	total_cnt++;
 80006aa:	4b4a      	ldr	r3, [pc, #296]	; (80007d4 <main+0x2a8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b48      	ldr	r3, [pc, #288]	; (80007d4 <main+0x2a8>)
 80006b4:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_11;
 80006b6:	4b48      	ldr	r3, [pc, #288]	; (80007d8 <main+0x2ac>)
 80006b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006bc:	809a      	strh	r2, [r3, #4]
		    	break;
 80006be:	e02f      	b.n	8000720 <main+0x1f4>
		    case 12:
		    	total_cnt++;
 80006c0:	4b44      	ldr	r3, [pc, #272]	; (80007d4 <main+0x2a8>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <main+0x2a8>)
 80006ca:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_12;
 80006cc:	4b42      	ldr	r3, [pc, #264]	; (80007d8 <main+0x2ac>)
 80006ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006d2:	809a      	strh	r2, [r3, #4]
		    	break;
 80006d4:	e024      	b.n	8000720 <main+0x1f4>
		    case 13:
		    	total_cnt++;
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <main+0x2a8>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <main+0x2a8>)
 80006e0:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_13;
 80006e2:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <main+0x2ac>)
 80006e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e8:	809a      	strh	r2, [r3, #4]
		    	break;
 80006ea:	e019      	b.n	8000720 <main+0x1f4>
		    case 14:
		    	total_cnt++;
 80006ec:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <main+0x2a8>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <main+0x2a8>)
 80006f6:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_14;
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <main+0x2ac>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	809a      	strh	r2, [r3, #4]
		    	break;
 8000700:	e00e      	b.n	8000720 <main+0x1f4>
		    case 15:
		    	total_cnt++;
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <main+0x2a8>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <main+0x2a8>)
 800070c:	701a      	strb	r2, [r3, #0]
		    	gpio.GPIO_Pin = GPIO_PIN_15;
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <main+0x2ac>)
 8000710:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000714:	809a      	strh	r2, [r3, #4]
		    	break;
 8000716:	e003      	b.n	8000720 <main+0x1f4>
		    default :
		    	total_cnt = -1;
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <main+0x2a8>)
 800071a:	22ff      	movs	r2, #255	; 0xff
 800071c:	701a      	strb	r2, [r3, #0]
		    	break;
 800071e:	bf00      	nop
		}
		//printf("[%d]\n", port_num);
		cnt++;
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <main+0x2a4>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <main+0x2a4>)
 800072a:	701a      	strb	r2, [r3, #0]
		if(msg[cnt] != 32) cnt++;
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <main+0x2a4>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <main+0x29c>)
 8000734:	5c9b      	ldrb	r3, [r3, r2]
 8000736:	2b20      	cmp	r3, #32
 8000738:	d005      	beq.n	8000746 <main+0x21a>
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <main+0x2a4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <main+0x2a4>)
 8000744:	701a      	strb	r2, [r3, #0]
		cnt++;
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <main+0x2a4>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <main+0x2a4>)
 8000750:	701a      	strb	r2, [r3, #0]

		if(msg[cnt] == 'H')
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <main+0x2a4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <main+0x29c>)
 800075a:	5c9b      	ldrb	r3, [r3, r2]
 800075c:	2b48      	cmp	r3, #72	; 0x48
 800075e:	d109      	bne.n	8000774 <main+0x248>
		{
			total_cnt++;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <main+0x2a8>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <main+0x2a8>)
 800076a:	701a      	strb	r2, [r3, #0]
			gpio.PinState = GPIO_PIN_SET;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <main+0x2ac>)
 800076e:	2201      	movs	r2, #1
 8000770:	719a      	strb	r2, [r3, #6]
 8000772:	e00f      	b.n	8000794 <main+0x268>
			//printf("HIGH\n");
		}
		else if(msg[cnt] == 'L')
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <main+0x2a4>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <main+0x29c>)
 800077c:	5c9b      	ldrb	r3, [r3, r2]
 800077e:	2b4c      	cmp	r3, #76	; 0x4c
 8000780:	d108      	bne.n	8000794 <main+0x268>
		{
			total_cnt++;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <main+0x2a8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <main+0x2a8>)
 800078c:	701a      	strb	r2, [r3, #0]
			gpio.PinState = GPIO_PIN_RESET;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <main+0x2ac>)
 8000790:	2200      	movs	r2, #0
 8000792:	719a      	strb	r2, [r3, #6]
			//printf("LOW\n");
		}

		if(total_cnt == 3)
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <main+0x2a8>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d129      	bne.n	80007f0 <main+0x2c4>
		{
			printf("\rCorrect Port\n");
 800079c:	4813      	ldr	r0, [pc, #76]	; (80007ec <main+0x2c0>)
 800079e:	f002 fb5d 	bl	8002e5c <puts>
			HAL_GPIO_WritePin(gpio.GPIOx, gpio.GPIO_Pin, gpio.PinState);
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <main+0x2ac>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <main+0x2ac>)
 80007a8:	8891      	ldrh	r1, [r2, #4]
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <main+0x2ac>)
 80007ac:	7992      	ldrb	r2, [r2, #6]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 f81a 	bl	80017e8 <HAL_GPIO_WritePin>
 80007b4:	e01f      	b.n	80007f6 <main+0x2ca>
 80007b6:	bf00      	nop
 80007b8:	20000348 	.word	0x20000348
 80007bc:	20000448 	.word	0x20000448
 80007c0:	2000048d 	.word	0x2000048d
 80007c4:	2000048c 	.word	0x2000048c
 80007c8:	20000490 	.word	0x20000490
 80007cc:	08003e88 	.word	0x08003e88
 80007d0:	20000000 	.word	0x20000000
 80007d4:	200004ac 	.word	0x200004ac
 80007d8:	200004b0 	.word	0x200004b0
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	40011000 	.word	0x40011000
 80007e8:	200004a8 	.word	0x200004a8
 80007ec:	08003e90 	.word	0x08003e90
		}
		else
		{
			printf("\rWrong Port Number\n");
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <main+0x2fc>)
 80007f2:	f002 fb33 	bl	8002e5c <puts>
		}


		memcpy(msg, temp_msg, sizeof(char)*10);
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <main+0x300>)
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <main+0x304>)
 80007fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80007fc:	c303      	stmia	r3!, {r0, r1}
 80007fe:	801a      	strh	r2, [r3, #0]
		memset(&gpio, 0, sizeof(struct GPIO_PORT));
 8000800:	2208      	movs	r2, #8
 8000802:	2100      	movs	r1, #0
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <main+0x308>)
 8000806:	f002 fa9b 	bl	8002d40 <memset>
		cnt = 1;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <main+0x30c>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
		total_cnt = 0;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <main+0x310>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
		port_num = 0;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <main+0x314>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
		Menu_Config();
 800081c:	f000 f91a 	bl	8000a54 <Menu_Config>
	}

	HAL_Delay(10);
 8000820:	200a      	movs	r0, #10
 8000822:	f000 fbe9 	bl	8000ff8 <HAL_Delay>
	if( final_flag == 1 )
 8000826:	e692      	b.n	800054e <main+0x22>
 8000828:	08003ea0 	.word	0x08003ea0
 800082c:	20000490 	.word	0x20000490
 8000830:	2000049c 	.word	0x2000049c
 8000834:	200004b0 	.word	0x200004b0
 8000838:	20000000 	.word	0x20000000
 800083c:	200004ac 	.word	0x200004ac
 8000840:	200004a8 	.word	0x200004a8

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	; 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0318 	add.w	r3, r7, #24
 800084e:	2238      	movs	r2, #56	; 0x38
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fa74 	bl	8002d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000870:	2304      	movs	r3, #4
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000888:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800088c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000892:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000898:	2340      	movs	r3, #64	; 0x40
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 ffb9 	bl	8001818 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80008ac:	f000 f9b8 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2102      	movs	r1, #2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 faba 	bl	8001e44 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008d6:	f000 f9a3 	bl	8000c20 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80008da:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <SystemClock_Config+0xa4>)
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	; 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	42420070 	.word	0x42420070

080008ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_UART4_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_UART4_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_UART4_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_UART4_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_UART4_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_UART4_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_UART4_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_UART4_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_UART4_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_UART4_Init+0x4c>)
 8000924:	f001 fca6 	bl	8002274 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f977 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000448 	.word	0x20000448
 800093c:	40004c00 	.word	0x40004c00

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000954:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <MX_GPIO_Init+0x104>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a3a      	ldr	r2, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x104>)
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <MX_GPIO_Init+0x104>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0320 	and.w	r3, r3, #32
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <MX_GPIO_Init+0x104>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a34      	ldr	r2, [pc, #208]	; (8000a44 <MX_GPIO_Init+0x104>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <MX_GPIO_Init+0x104>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <MX_GPIO_Init+0x104>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <MX_GPIO_Init+0x104>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <MX_GPIO_Init+0x104>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0310 	and.w	r3, r3, #16
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <MX_GPIO_Init+0x104>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x104>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_GPIO_Init+0x104>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	4823      	ldr	r0, [pc, #140]	; (8000a48 <MX_GPIO_Init+0x108>)
 80009ba:	f000 ff15 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80009c4:	4821      	ldr	r0, [pc, #132]	; (8000a4c <MX_GPIO_Init+0x10c>)
 80009c6:	f000 ff0f 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 80009ca:	2200      	movs	r2, #0
 80009cc:	f24f 2143 	movw	r1, #62019	; 0xf243
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <MX_GPIO_Init+0x110>)
 80009d2:	f000 ff09 	bl	80017e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x110>)
 80009de:	f000 ff03 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MX_GPIO_Init+0x108>)
 80009fa:	f000 fd71 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80009fe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_GPIO_Init+0x10c>)
 8000a18:	f000 fd62 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB14 PB15 PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000a1c:	f64f 2343 	movw	r3, #64067	; 0xfa43
 8000a20:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x110>)
 8000a36:	f000 fd53 	bl	80014e0 <HAL_GPIO_Init>
  /*GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/

}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <Menu_Config>:

/* USER CODE BEGIN 4 */

void Menu_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	printf("----------------------------------------------------------\r");
	printf("EX) Type 'PA6 H' or 'PB12 L' 	\r");
	printf("----------------------------------------------------------\r");
	*/

	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer02, (countof(TxBuffer02) - 1), 0xFFFF);
 8000a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5c:	223c      	movs	r2, #60	; 0x3c
 8000a5e:	493e      	ldr	r1, [pc, #248]	; (8000b58 <Menu_Config+0x104>)
 8000a60:	483e      	ldr	r0, [pc, #248]	; (8000b5c <Menu_Config+0x108>)
 8000a62:	f001 fc54 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer03, (countof(TxBuffer03) - 1), 0xFFFF);
 8000a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a6a:	223c      	movs	r2, #60	; 0x3c
 8000a6c:	493c      	ldr	r1, [pc, #240]	; (8000b60 <Menu_Config+0x10c>)
 8000a6e:	483b      	ldr	r0, [pc, #236]	; (8000b5c <Menu_Config+0x108>)
 8000a70:	f001 fc4d 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer04, (countof(TxBuffer04) - 1), 0xFFFF);
 8000a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a78:	223c      	movs	r2, #60	; 0x3c
 8000a7a:	493a      	ldr	r1, [pc, #232]	; (8000b64 <Menu_Config+0x110>)
 8000a7c:	4837      	ldr	r0, [pc, #220]	; (8000b5c <Menu_Config+0x108>)
 8000a7e:	f001 fc46 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer05, (countof(TxBuffer05) - 1), 0xFFFF);
 8000a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a86:	221b      	movs	r2, #27
 8000a88:	4937      	ldr	r1, [pc, #220]	; (8000b68 <Menu_Config+0x114>)
 8000a8a:	4834      	ldr	r0, [pc, #208]	; (8000b5c <Menu_Config+0x108>)
 8000a8c:	f001 fc3f 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer06, (countof(TxBuffer06) - 1), 0xFFFF);
 8000a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a94:	2216      	movs	r2, #22
 8000a96:	4935      	ldr	r1, [pc, #212]	; (8000b6c <Menu_Config+0x118>)
 8000a98:	4830      	ldr	r0, [pc, #192]	; (8000b5c <Menu_Config+0x108>)
 8000a9a:	f001 fc38 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer07, (countof(TxBuffer07) - 1), 0xFFFF);
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2216      	movs	r2, #22
 8000aa4:	4932      	ldr	r1, [pc, #200]	; (8000b70 <Menu_Config+0x11c>)
 8000aa6:	482d      	ldr	r0, [pc, #180]	; (8000b5c <Menu_Config+0x108>)
 8000aa8:	f001 fc31 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer08, (countof(TxBuffer08) - 1), 0xFFFF);
 8000aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab0:	2216      	movs	r2, #22
 8000ab2:	4930      	ldr	r1, [pc, #192]	; (8000b74 <Menu_Config+0x120>)
 8000ab4:	4829      	ldr	r0, [pc, #164]	; (8000b5c <Menu_Config+0x108>)
 8000ab6:	f001 fc2a 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer09, (countof(TxBuffer09) - 1), 0xFFFF);
 8000aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000abe:	2216      	movs	r2, #22
 8000ac0:	492d      	ldr	r1, [pc, #180]	; (8000b78 <Menu_Config+0x124>)
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <Menu_Config+0x108>)
 8000ac4:	f001 fc23 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer10, (countof(TxBuffer10) - 1), 0xFFFF);
 8000ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000acc:	221b      	movs	r2, #27
 8000ace:	492b      	ldr	r1, [pc, #172]	; (8000b7c <Menu_Config+0x128>)
 8000ad0:	4822      	ldr	r0, [pc, #136]	; (8000b5c <Menu_Config+0x108>)
 8000ad2:	f001 fc1c 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer11, (countof(TxBuffer11) - 1), 0xFFFF);
 8000ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ada:	2219      	movs	r2, #25
 8000adc:	4928      	ldr	r1, [pc, #160]	; (8000b80 <Menu_Config+0x12c>)
 8000ade:	481f      	ldr	r0, [pc, #124]	; (8000b5c <Menu_Config+0x108>)
 8000ae0:	f001 fc15 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer12, (countof(TxBuffer12) - 1), 0xFFFF);
 8000ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae8:	2218      	movs	r2, #24
 8000aea:	4926      	ldr	r1, [pc, #152]	; (8000b84 <Menu_Config+0x130>)
 8000aec:	481b      	ldr	r0, [pc, #108]	; (8000b5c <Menu_Config+0x108>)
 8000aee:	f001 fc0e 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer13, (countof(TxBuffer13) - 1), 0xFFFF);
 8000af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af6:	221a      	movs	r2, #26
 8000af8:	4923      	ldr	r1, [pc, #140]	; (8000b88 <Menu_Config+0x134>)
 8000afa:	4818      	ldr	r0, [pc, #96]	; (8000b5c <Menu_Config+0x108>)
 8000afc:	f001 fc07 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer14, (countof(TxBuffer14) - 1), 0xFFFF);
 8000b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b04:	2219      	movs	r2, #25
 8000b06:	4921      	ldr	r1, [pc, #132]	; (8000b8c <Menu_Config+0x138>)
 8000b08:	4814      	ldr	r0, [pc, #80]	; (8000b5c <Menu_Config+0x108>)
 8000b0a:	f001 fc00 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer15, (countof(TxBuffer15) - 1), 0xFFFF);
 8000b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b12:	221e      	movs	r2, #30
 8000b14:	491e      	ldr	r1, [pc, #120]	; (8000b90 <Menu_Config+0x13c>)
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <Menu_Config+0x108>)
 8000b18:	f001 fbf9 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer16, (countof(TxBuffer16) - 1), 0xFFFF);
 8000b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b20:	2219      	movs	r2, #25
 8000b22:	491c      	ldr	r1, [pc, #112]	; (8000b94 <Menu_Config+0x140>)
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <Menu_Config+0x108>)
 8000b26:	f001 fbf2 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer17, (countof(TxBuffer17) - 1), 0xFFFF);
 8000b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2e:	223c      	movs	r2, #60	; 0x3c
 8000b30:	4919      	ldr	r1, [pc, #100]	; (8000b98 <Menu_Config+0x144>)
 8000b32:	480a      	ldr	r0, [pc, #40]	; (8000b5c <Menu_Config+0x108>)
 8000b34:	f001 fbeb 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer18, (countof(TxBuffer18) - 1), 0xFFFF);
 8000b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	4917      	ldr	r1, [pc, #92]	; (8000b9c <Menu_Config+0x148>)
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <Menu_Config+0x108>)
 8000b42:	f001 fbe4 	bl	800230e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)TxBuffer19, (countof(TxBuffer19) - 1), 0xFFFF);
 8000b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4a:	224f      	movs	r2, #79	; 0x4f
 8000b4c:	4914      	ldr	r1, [pc, #80]	; (8000ba0 <Menu_Config+0x14c>)
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <Menu_Config+0x108>)
 8000b50:	f001 fbdd 	bl	800230e <HAL_UART_Transmit>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	20000448 	.word	0x20000448
 8000b60:	20000044 	.word	0x20000044
 8000b64:	20000084 	.word	0x20000084
 8000b68:	200000c4 	.word	0x200000c4
 8000b6c:	200000e0 	.word	0x200000e0
 8000b70:	200000f8 	.word	0x200000f8
 8000b74:	20000110 	.word	0x20000110
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	20000140 	.word	0x20000140
 8000b80:	2000015c 	.word	0x2000015c
 8000b84:	20000178 	.word	0x20000178
 8000b88:	20000194 	.word	0x20000194
 8000b8c:	200001b0 	.word	0x200001b0
 8000b90:	200001cc 	.word	0x200001cc
 8000b94:	200001ec 	.word	0x200001ec
 8000b98:	20000208 	.word	0x20000208
 8000b9c:	20000248 	.word	0x20000248
 8000ba0:	2000026c 	.word	0x2000026c

08000ba4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandler)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if(RxBuffer[0] == '\r')
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_UART_RxCpltCallback+0x44>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b0d      	cmp	r3, #13
 8000bb2:	d103      	bne.n	8000bbc <HAL_UART_RxCpltCallback+0x18>
	{
		final_flag = 1;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_UART_RxCpltCallback+0x48>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e00c      	b.n	8000bd6 <HAL_UART_RxCpltCallback+0x32>
	}
	else
	{
		msg[i] = RxBuffer[0];
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_UART_RxCpltCallback+0x4c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_UART_RxCpltCallback+0x44>)
 8000bc4:	7819      	ldrb	r1, [r3, #0]
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_UART_RxCpltCallback+0x50>)
 8000bc8:	5499      	strb	r1, [r3, r2]
		i++;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_UART_RxCpltCallback+0x4c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <HAL_UART_RxCpltCallback+0x4c>)
 8000bd4:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart4, (uint8_t*)RxBuffer, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4903      	ldr	r1, [pc, #12]	; (8000be8 <HAL_UART_RxCpltCallback+0x44>)
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <HAL_UART_RxCpltCallback+0x54>)
 8000bdc:	f001 fc29 	bl	8002432 <HAL_UART_Receive_IT>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000348 	.word	0x20000348
 8000bec:	2000048d 	.word	0x2000048d
 8000bf0:	2000048c 	.word	0x2000048c
 8000bf4:	20000490 	.word	0x20000490
 8000bf8:	20000448 	.word	0x20000448

08000bfc <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000c04:	1d39      	adds	r1, r7, #4
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <__io_putchar+0x20>)
 8000c0e:	f001 fb7e 	bl	800230e <HAL_UART_Transmit>

  return ch;
 8000c12:	687b      	ldr	r3, [r7, #4]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000448 	.word	0x20000448

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_MspInit+0x60>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_MspInit+0x60>)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <HAL_UART_MspInit+0x9c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d139      	bne.n	8000d24 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_UART_MspInit+0xa0>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <HAL_UART_MspInit+0xa0>)
 8000cb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cba:	61d3      	str	r3, [r2, #28]
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_UART_MspInit+0xa0>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_UART_MspInit+0xa0>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <HAL_UART_MspInit+0xa0>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_UART_MspInit+0xa0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480f      	ldr	r0, [pc, #60]	; (8000d34 <HAL_UART_MspInit+0xa4>)
 8000cf6:	f000 fbf3 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <HAL_UART_MspInit+0xa4>)
 8000d10:	f000 fbe6 	bl	80014e0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	2034      	movs	r0, #52	; 0x34
 8000d1a:	f000 fa68 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d1e:	2034      	movs	r0, #52	; 0x34
 8000d20:	f000 fa81 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40004c00 	.word	0x40004c00
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40011000 	.word	0x40011000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f91f 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <UART4_IRQHandler+0x10>)
 8000d8e:	f001 fb81 	bl	8002494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000448 	.word	0x20000448

08000d9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e00a      	b.n	8000dc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dae:	f3af 8000 	nop.w
 8000db2:	4601      	mov	r1, r0
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	60ba      	str	r2, [r7, #8]
 8000dba:	b2ca      	uxtb	r2, r1
 8000dbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf0      	blt.n	8000dae <_read+0x12>
	}

return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	e009      	b.n	8000dfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	60ba      	str	r2, [r7, #8]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff03 	bl	8000bfc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf1      	blt.n	8000de8 <_write+0x12>
	}
	return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_close>:

int _close(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	return -1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e34:	605a      	str	r2, [r3, #4]
	return 0;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <_isatty>:

int _isatty(int file)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f001 ff24 	bl	8002cec <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20010000 	.word	0x20010000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	200004b8 	.word	0x200004b8
 8000ed8:	200004d0 	.word	0x200004d0

08000edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f0e:	f7ff ffe5 	bl	8000edc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f12:	f001 fef1 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f16:	f7ff fb09 	bl	800052c <main>
  bx lr
 8000f1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8000f24:	08004098 	.word	0x08004098
  ldr r2, =_sbss
 8000f28:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8000f2c:	200004d0 	.word	0x200004d0

08000f30 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x28>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f947 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fe6c 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f95f 	bl	8001242 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f927 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002bc 	.word	0x200002bc
 8000fb8:	200002c4 	.word	0x200002c4
 8000fbc:	200002c0 	.word	0x200002c0

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	200002c4 	.word	0x200002c4
 8000fe0:	200004bc 	.word	0x200004bc

08000fe4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <HAL_GetTick+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	200004bc 	.word	0x200004bc

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff fff0 	bl	8000fe4 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffe0 	bl	8000fe4 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200002c4 	.word	0x200002c4

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4906      	ldr	r1, [pc, #24]	; (80010d8 <__NVIC_EnableIRQ+0x34>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff90 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff2d 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff42 	bl	8001088 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff90 	bl	8001130 <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5f 	bl	80010dc <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff35 	bl	80010a4 <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800126c:	2b02      	cmp	r3, #2
 800126e:	d008      	beq.n	8001282 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2204      	movs	r2, #4
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e020      	b.n	80012c4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 020e 	bic.w	r2, r2, #14
 8001290:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d005      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2204      	movs	r2, #4
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e0d6      	b.n	80014a0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 020e 	bic.w	r2, r2, #14
 8001300:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b64      	ldr	r3, [pc, #400]	; (80014ac <HAL_DMA_Abort_IT+0x1dc>)
 800131a:	429a      	cmp	r2, r3
 800131c:	d958      	bls.n	80013d0 <HAL_DMA_Abort_IT+0x100>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a63      	ldr	r2, [pc, #396]	; (80014b0 <HAL_DMA_Abort_IT+0x1e0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d04f      	beq.n	80013c8 <HAL_DMA_Abort_IT+0xf8>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a61      	ldr	r2, [pc, #388]	; (80014b4 <HAL_DMA_Abort_IT+0x1e4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d048      	beq.n	80013c4 <HAL_DMA_Abort_IT+0xf4>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a60      	ldr	r2, [pc, #384]	; (80014b8 <HAL_DMA_Abort_IT+0x1e8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d040      	beq.n	80013be <HAL_DMA_Abort_IT+0xee>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a5e      	ldr	r2, [pc, #376]	; (80014bc <HAL_DMA_Abort_IT+0x1ec>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d038      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xe8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a5d      	ldr	r2, [pc, #372]	; (80014c0 <HAL_DMA_Abort_IT+0x1f0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d030      	beq.n	80013b2 <HAL_DMA_Abort_IT+0xe2>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a5b      	ldr	r2, [pc, #364]	; (80014c4 <HAL_DMA_Abort_IT+0x1f4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d028      	beq.n	80013ac <HAL_DMA_Abort_IT+0xdc>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a53      	ldr	r2, [pc, #332]	; (80014ac <HAL_DMA_Abort_IT+0x1dc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d020      	beq.n	80013a6 <HAL_DMA_Abort_IT+0xd6>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a57      	ldr	r2, [pc, #348]	; (80014c8 <HAL_DMA_Abort_IT+0x1f8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_DMA_Abort_IT+0xd2>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a56      	ldr	r2, [pc, #344]	; (80014cc <HAL_DMA_Abort_IT+0x1fc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d012      	beq.n	800139e <HAL_DMA_Abort_IT+0xce>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a54      	ldr	r2, [pc, #336]	; (80014d0 <HAL_DMA_Abort_IT+0x200>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00a      	beq.n	8001398 <HAL_DMA_Abort_IT+0xc8>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <HAL_DMA_Abort_IT+0x204>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d102      	bne.n	8001392 <HAL_DMA_Abort_IT+0xc2>
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	e01b      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 8001392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001396:	e018      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 8001398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139c:	e015      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 800139e:	2310      	movs	r3, #16
 80013a0:	e013      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e011      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 80013a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013aa:	e00e      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 80013ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013b0:	e00b      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	e008      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	e005      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 80013be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c2:	e002      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 80013c4:	2310      	movs	r3, #16
 80013c6:	e000      	b.n	80013ca <HAL_DMA_Abort_IT+0xfa>
 80013c8:	2301      	movs	r3, #1
 80013ca:	4a43      	ldr	r2, [pc, #268]	; (80014d8 <HAL_DMA_Abort_IT+0x208>)
 80013cc:	6053      	str	r3, [r2, #4]
 80013ce:	e057      	b.n	8001480 <HAL_DMA_Abort_IT+0x1b0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <HAL_DMA_Abort_IT+0x1e0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d04f      	beq.n	800147a <HAL_DMA_Abort_IT+0x1aa>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a35      	ldr	r2, [pc, #212]	; (80014b4 <HAL_DMA_Abort_IT+0x1e4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d048      	beq.n	8001476 <HAL_DMA_Abort_IT+0x1a6>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <HAL_DMA_Abort_IT+0x1e8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d040      	beq.n	8001470 <HAL_DMA_Abort_IT+0x1a0>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_DMA_Abort_IT+0x1ec>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d038      	beq.n	800146a <HAL_DMA_Abort_IT+0x19a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a30      	ldr	r2, [pc, #192]	; (80014c0 <HAL_DMA_Abort_IT+0x1f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d030      	beq.n	8001464 <HAL_DMA_Abort_IT+0x194>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_DMA_Abort_IT+0x1f4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d028      	beq.n	800145e <HAL_DMA_Abort_IT+0x18e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a26      	ldr	r2, [pc, #152]	; (80014ac <HAL_DMA_Abort_IT+0x1dc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d020      	beq.n	8001458 <HAL_DMA_Abort_IT+0x188>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <HAL_DMA_Abort_IT+0x1f8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d019      	beq.n	8001454 <HAL_DMA_Abort_IT+0x184>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a29      	ldr	r2, [pc, #164]	; (80014cc <HAL_DMA_Abort_IT+0x1fc>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d012      	beq.n	8001450 <HAL_DMA_Abort_IT+0x180>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <HAL_DMA_Abort_IT+0x200>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d00a      	beq.n	800144a <HAL_DMA_Abort_IT+0x17a>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <HAL_DMA_Abort_IT+0x204>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d102      	bne.n	8001444 <HAL_DMA_Abort_IT+0x174>
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	e01b      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 8001444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001448:	e018      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 800144a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144e:	e015      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 8001450:	2310      	movs	r3, #16
 8001452:	e013      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 8001454:	2301      	movs	r3, #1
 8001456:	e011      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 8001458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800145c:	e00e      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 800145e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001462:	e00b      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 8001464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001468:	e008      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	e005      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 8001470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001474:	e002      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 8001476:	2310      	movs	r3, #16
 8001478:	e000      	b.n	800147c <HAL_DMA_Abort_IT+0x1ac>
 800147a:	2301      	movs	r3, #1
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_DMA_Abort_IT+0x20c>)
 800147e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
    } 
  }
  return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40020080 	.word	0x40020080
 80014b0:	40020008 	.word	0x40020008
 80014b4:	4002001c 	.word	0x4002001c
 80014b8:	40020030 	.word	0x40020030
 80014bc:	40020044 	.word	0x40020044
 80014c0:	40020058 	.word	0x40020058
 80014c4:	4002006c 	.word	0x4002006c
 80014c8:	40020408 	.word	0x40020408
 80014cc:	4002041c 	.word	0x4002041c
 80014d0:	40020430 	.word	0x40020430
 80014d4:	40020444 	.word	0x40020444
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020000 	.word	0x40020000

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b08b      	sub	sp, #44	; 0x2c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	e169      	b.n	80017c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f4:	2201      	movs	r2, #1
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8158 	bne.w	80017c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a9a      	ldr	r2, [pc, #616]	; (8001780 <HAL_GPIO_Init+0x2a0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d05e      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800151c:	4a98      	ldr	r2, [pc, #608]	; (8001780 <HAL_GPIO_Init+0x2a0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d875      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001522:	4a98      	ldr	r2, [pc, #608]	; (8001784 <HAL_GPIO_Init+0x2a4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d058      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001528:	4a96      	ldr	r2, [pc, #600]	; (8001784 <HAL_GPIO_Init+0x2a4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d86f      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800152e:	4a96      	ldr	r2, [pc, #600]	; (8001788 <HAL_GPIO_Init+0x2a8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d052      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001534:	4a94      	ldr	r2, [pc, #592]	; (8001788 <HAL_GPIO_Init+0x2a8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d869      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800153a:	4a94      	ldr	r2, [pc, #592]	; (800178c <HAL_GPIO_Init+0x2ac>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d04c      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001540:	4a92      	ldr	r2, [pc, #584]	; (800178c <HAL_GPIO_Init+0x2ac>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d863      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001546:	4a92      	ldr	r2, [pc, #584]	; (8001790 <HAL_GPIO_Init+0x2b0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d046      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800154c:	4a90      	ldr	r2, [pc, #576]	; (8001790 <HAL_GPIO_Init+0x2b0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d85d      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d82a      	bhi.n	80015ac <HAL_GPIO_Init+0xcc>
 8001556:	2b12      	cmp	r3, #18
 8001558:	d859      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <HAL_GPIO_Init+0x80>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	080015db 	.word	0x080015db
 8001564:	080015b5 	.word	0x080015b5
 8001568:	080015c7 	.word	0x080015c7
 800156c:	08001609 	.word	0x08001609
 8001570:	0800160f 	.word	0x0800160f
 8001574:	0800160f 	.word	0x0800160f
 8001578:	0800160f 	.word	0x0800160f
 800157c:	0800160f 	.word	0x0800160f
 8001580:	0800160f 	.word	0x0800160f
 8001584:	0800160f 	.word	0x0800160f
 8001588:	0800160f 	.word	0x0800160f
 800158c:	0800160f 	.word	0x0800160f
 8001590:	0800160f 	.word	0x0800160f
 8001594:	0800160f 	.word	0x0800160f
 8001598:	0800160f 	.word	0x0800160f
 800159c:	0800160f 	.word	0x0800160f
 80015a0:	0800160f 	.word	0x0800160f
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015d1 	.word	0x080015d1
 80015ac:	4a79      	ldr	r2, [pc, #484]	; (8001794 <HAL_GPIO_Init+0x2b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b2:	e02c      	b.n	800160e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e029      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	3304      	adds	r3, #4
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e024      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	3308      	adds	r3, #8
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e01f      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	330c      	adds	r3, #12
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e01a      	b.n	8001610 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015e2:	2304      	movs	r3, #4
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e013      	b.n	8001610 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f0:	2308      	movs	r3, #8
 80015f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	611a      	str	r2, [r3, #16]
          break;
 80015fa:	e009      	b.n	8001610 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015fc:	2308      	movs	r3, #8
 80015fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	615a      	str	r2, [r3, #20]
          break;
 8001606:	e003      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x130>
          break;
 800160e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d801      	bhi.n	800161a <HAL_GPIO_Init+0x13a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	e001      	b.n	800161e <HAL_GPIO_Init+0x13e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d802      	bhi.n	800162c <HAL_GPIO_Init+0x14c>
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x152>
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3b08      	subs	r3, #8
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	210f      	movs	r1, #15
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	401a      	ands	r2, r3
 8001644:	6a39      	ldr	r1, [r7, #32]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80b1 	beq.w	80017c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001660:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a4c      	ldr	r2, [pc, #304]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001678:	4a48      	ldr	r2, [pc, #288]	; (800179c <HAL_GPIO_Init+0x2bc>)
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a40      	ldr	r2, [pc, #256]	; (80017a0 <HAL_GPIO_Init+0x2c0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d013      	beq.n	80016cc <HAL_GPIO_Init+0x1ec>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3f      	ldr	r2, [pc, #252]	; (80017a4 <HAL_GPIO_Init+0x2c4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00d      	beq.n	80016c8 <HAL_GPIO_Init+0x1e8>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <HAL_GPIO_Init+0x2c8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0x1e4>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3d      	ldr	r2, [pc, #244]	; (80017ac <HAL_GPIO_Init+0x2cc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_Init+0x1e0>
 80016bc:	2303      	movs	r3, #3
 80016be:	e006      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e004      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016cc:	2300      	movs	r3, #0
 80016ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d0:	f002 0203 	and.w	r2, r2, #3
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016de:	492f      	ldr	r1, [pc, #188]	; (800179c <HAL_GPIO_Init+0x2bc>)
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	492c      	ldr	r1, [pc, #176]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	43db      	mvns	r3, r3
 800170e:	4928      	ldr	r1, [pc, #160]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001710:	4013      	ands	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4922      	ldr	r1, [pc, #136]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	491e      	ldr	r1, [pc, #120]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4918      	ldr	r1, [pc, #96]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	4914      	ldr	r1, [pc, #80]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d021      	beq.n	80017b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
 800177c:	e021      	b.n	80017c2 <HAL_GPIO_Init+0x2e2>
 800177e:	bf00      	nop
 8001780:	10320000 	.word	0x10320000
 8001784:	10310000 	.word	0x10310000
 8001788:	10220000 	.word	0x10220000
 800178c:	10210000 	.word	0x10210000
 8001790:	10120000 	.word	0x10120000
 8001794:	10110000 	.word	0x10110000
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40011400 	.word	0x40011400
 80017b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_GPIO_Init+0x304>)
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4909      	ldr	r1, [pc, #36]	; (80017e4 <HAL_GPIO_Init+0x304>)
 80017be:	4013      	ands	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f ae8e 	bne.w	80014f4 <HAL_GPIO_Init+0x14>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	372c      	adds	r7, #44	; 0x2c
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001804:	e003      	b.n	800180e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e304      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8087 	beq.w	8001946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001838:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b04      	cmp	r3, #4
 8001842:	d00c      	beq.n	800185e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001844:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d112      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
 8001850:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d10b      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d06c      	beq.n	8001944 <HAL_RCC_OscConfig+0x12c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d168      	bne.n	8001944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e2de      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x76>
 8001880:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a7f      	ldr	r2, [pc, #508]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e02e      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x98>
 8001896:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7a      	ldr	r2, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a77      	ldr	r2, [pc, #476]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0xbc>
 80018ba:	4b72      	ldr	r3, [pc, #456]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a71      	ldr	r2, [pc, #452]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6e      	ldr	r2, [pc, #440]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 80018d4:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6a      	ldr	r2, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a67      	ldr	r2, [pc, #412]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb76 	bl	8000fe4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fb72 	bl	8000fe4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e292      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0xe4>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb62 	bl	8000fe4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fb5e 	bl	8000fe4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e27e      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x10c>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001952:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800195e:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d11c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x18c>
 800196a:	4b46      	ldr	r3, [pc, #280]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d116      	bne.n	80019a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e252      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4939      	ldr	r1, [pc, #228]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_RCC_OscConfig+0x270>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fb17 	bl	8000fe4 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fb13 	bl	8000fe4 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e233      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4927      	ldr	r1, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_RCC_OscConfig+0x270>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff faf6 	bl	8000fe4 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff faf2 	bl	8000fe4 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e212      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d03a      	beq.n	8001a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d019      	beq.n	8001a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7ff fad6 	bl	8000fe4 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fad2 	bl	8000fe4 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1f2      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 fbec 	bl	8002238 <RCC_Delay>
 8001a60:	e01c      	b.n	8001a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff fabc 	bl	8000fe4 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6e:	e00f      	b.n	8001a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff fab8 	bl	8000fe4 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d908      	bls.n	8001a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1d8      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	42420000 	.word	0x42420000
 8001a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b9b      	ldr	r3, [pc, #620]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e9      	bne.n	8001a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a6 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b94      	ldr	r3, [pc, #592]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a90      	ldr	r2, [pc, #576]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <HAL_RCC_OscConfig+0x4ec>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x4ec>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a87      	ldr	r2, [pc, #540]	; (8001d04 <HAL_RCC_OscConfig+0x4ec>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fa79 	bl	8000fe4 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff fa75 	bl	8000fe4 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e195      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b7e      	ldr	r3, [pc, #504]	; (8001d04 <HAL_RCC_OscConfig+0x4ec>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x312>
 8001b1c:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e02d      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x334>
 8001b32:	4b73      	ldr	r3, [pc, #460]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a72      	ldr	r2, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	e01c      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x356>
 8001b54:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a69      	ldr	r2, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a66      	ldr	r2, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b6e:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a60      	ldr	r2, [pc, #384]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d015      	beq.n	8001bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fa29 	bl	8000fe4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff fa25 	bl	8000fe4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e143      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ee      	beq.n	8001b96 <HAL_RCC_OscConfig+0x37e>
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7ff fa13 	bl	8000fe4 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff fa0f 	bl	8000fe4 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e12d      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ee      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d105      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b45      	ldr	r3, [pc, #276]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a44      	ldr	r2, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 808c 	beq.w	8001d18 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d10e      	bne.n	8001c2c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001c0e:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e103      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d14e      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0ef      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001c54:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_RCC_OscConfig+0x4f0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f9c3 	bl	8000fe4 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001c62:	f7ff f9bf 	bl	8000fe4 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0df      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	491c      	ldr	r1, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4918      	ldr	r1, [pc, #96]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_RCC_OscConfig+0x4f0>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f99b 	bl	8000fe4 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001cb2:	f7ff f997 	bl	8000fe4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0b7      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x49a>
 8001cd0:	e022      	b.n	8001d18 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_RCC_OscConfig+0x4e8>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_OscConfig+0x4f0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f97e 	bl	8000fe4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001cea:	e00f      	b.n	8001d0c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001cec:	f7ff f97a 	bl	8000fe4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d908      	bls.n	8001d0c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e09a      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
 8001d08:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001d0c:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e9      	bne.n	8001cec <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8088 	beq.w	8001e32 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d068      	beq.n	8001e00 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d14d      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <HAL_RCC_OscConfig+0x628>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f952 	bl	8000fe4 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f94e 	bl	8000fe4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e06e      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d56:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d10f      	bne.n	8001d8c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4931      	ldr	r1, [pc, #196]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f023 020f 	bic.w	r2, r3, #15
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	492d      	ldr	r1, [pc, #180]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	4927      	ldr	r1, [pc, #156]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_RCC_OscConfig+0x628>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff f91b 	bl	8000fe4 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff f917 	bl	8000fe4 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e037      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x59a>
 8001dd0:	e02f      	b.n	8001e32 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x628>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f904 	bl	8000fe4 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f900 	bl	8000fe4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e020      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c8>
 8001dfe:	e018      	b.n	8001e32 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e013      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_OscConfig+0x624>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	42420060 	.word	0x42420060

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0d0      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	4965      	ldr	r1, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b8      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d040      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d115      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e073      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06b      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4936      	ldr	r1, [pc, #216]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7ff f856 	bl	8000fe4 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7ff f852 	bl	8000fe4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e053      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 020c 	and.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1eb      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d210      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4922      	ldr	r1, [pc, #136]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e032      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f821 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	490a      	ldr	r1, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	5ccb      	ldrb	r3, [r1, r3]
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1cc>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe ffb4 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	08003ed4 	.word	0x08003ed4
 8002010:	200002bc 	.word	0x200002bc
 8002014:	200002c0 	.word	0x200002c0

08002018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800201c:	b099      	sub	sp, #100	; 0x64
 800201e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002022:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002028:	c407      	stmia	r4!, {r0, r1, r2}
 800202a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800202c:	4b64      	ldr	r3, [pc, #400]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800202e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	657b      	str	r3, [r7, #84]	; 0x54
 800203c:	2300      	movs	r3, #0
 800203e:	653b      	str	r3, [r7, #80]	; 0x50
 8002040:	2300      	movs	r3, #0
 8002042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002044:	2300      	movs	r3, #0
 8002046:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002050:	2300      	movs	r3, #0
 8002052:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002054:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800205a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b04      	cmp	r3, #4
 8002062:	d002      	beq.n	800206a <HAL_RCC_GetSysClockFreq+0x52>
 8002064:	2b08      	cmp	r3, #8
 8002066:	d003      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x58>
 8002068:	e09f      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800206a:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800206c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800206e:	e09f      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	3340      	adds	r3, #64	; 0x40
 800207a:	f107 0220 	add.w	r2, r7, #32
 800207e:	4413      	add	r3, r2
 8002080:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002084:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8084 	beq.w	800219a <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002092:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3340      	adds	r3, #64	; 0x40
 800209c:	f107 0220 	add.w	r2, r7, #32
 80020a0:	4413      	add	r3, r2
 80020a2:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80020a6:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80020a8:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d060      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3301      	adds	r3, #1
 80020c0:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	3302      	adds	r3, #2
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d2:	2200      	movs	r2, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	617a      	str	r2, [r7, #20]
 80020d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020da:	2200      	movs	r2, #0
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	61fa      	str	r2, [r7, #28]
 80020e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020e4:	4622      	mov	r2, r4
 80020e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ea:	4684      	mov	ip, r0
 80020ec:	fb0c f202 	mul.w	r2, ip, r2
 80020f0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80020f4:	468c      	mov	ip, r1
 80020f6:	4618      	mov	r0, r3
 80020f8:	4621      	mov	r1, r4
 80020fa:	4603      	mov	r3, r0
 80020fc:	fb03 f30c 	mul.w	r3, r3, ip
 8002100:	4413      	add	r3, r2
 8002102:	4602      	mov	r2, r0
 8002104:	69b9      	ldr	r1, [r7, #24]
 8002106:	fba2 8901 	umull	r8, r9, r2, r1
 800210a:	444b      	add	r3, r9
 800210c:	4699      	mov	r9, r3
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8002110:	fb03 f209 	mul.w	r2, r3, r9
 8002114:	2300      	movs	r3, #0
 8002116:	fb03 f308 	mul.w	r3, r3, r8
 800211a:	4413      	add	r3, r2
 800211c:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800211e:	fba8 ab02 	umull	sl, fp, r8, r2
 8002122:	445b      	add	r3, fp
 8002124:	469b      	mov	fp, r3
 8002126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002128:	2200      	movs	r2, #0
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	60fa      	str	r2, [r7, #12]
 800212e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002130:	2200      	movs	r2, #0
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800213a:	4622      	mov	r2, r4
 800213c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8002140:	4641      	mov	r1, r8
 8002142:	fb01 f202 	mul.w	r2, r1, r2
 8002146:	46cc      	mov	ip, r9
 8002148:	4618      	mov	r0, r3
 800214a:	4621      	mov	r1, r4
 800214c:	4603      	mov	r3, r0
 800214e:	fb03 f30c 	mul.w	r3, r3, ip
 8002152:	4413      	add	r3, r2
 8002154:	4602      	mov	r2, r0
 8002156:	4641      	mov	r1, r8
 8002158:	fba2 5601 	umull	r5, r6, r2, r1
 800215c:	4433      	add	r3, r6
 800215e:	461e      	mov	r6, r3
 8002160:	462a      	mov	r2, r5
 8002162:	4633      	mov	r3, r6
 8002164:	4650      	mov	r0, sl
 8002166:	4659      	mov	r1, fp
 8002168:	f7fe f85c 	bl	8000224 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4613      	mov	r3, r2
 8002172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002174:	e007      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002178:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800217a:	fb03 f202 	mul.w	r2, r3, r2
 800217e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002186:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800218a:	461a      	mov	r2, r3
 800218c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218e:	4293      	cmp	r3, r2
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8002192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002198:	e004      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800219a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_RCC_GetSysClockFreq+0x1b4>)
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 80021a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a6:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80021a8:	e002      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ac:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80021ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3764      	adds	r7, #100	; 0x64
 80021b6:	46bd      	mov	sp, r7
 80021b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021bc:	08003eb4 	.word	0x08003eb4
 80021c0:	08003ec4 	.word	0x08003ec4
 80021c4:	40021000 	.word	0x40021000
 80021c8:	017d7840 	.word	0x017d7840
 80021cc:	003d0900 	.word	0x003d0900
 80021d0:	007a1200 	.word	0x007a1200

080021d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	200002bc 	.word	0x200002bc

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021ec:	f7ff fff2 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	; (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	08003ee4 	.word	0x08003ee4

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002214:	f7ff ffde 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0adb      	lsrs	r3, r3, #11
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	08003ee4 	.word	0x08003ee4

08002238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <RCC_Delay+0x34>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <RCC_Delay+0x38>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0a5b      	lsrs	r3, r3, #9
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002254:	bf00      	nop
  }
  while (Delay --);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	60fa      	str	r2, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f9      	bne.n	8002254 <RCC_Delay+0x1c>
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	200002bc 	.word	0x200002bc
 8002270:	10624dd3 	.word	0x10624dd3

08002274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e03f      	b.n	8002306 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fcf8 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	; 0x24
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fc85 	bl	8002bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b08a      	sub	sp, #40	; 0x28
 8002312:	af02      	add	r7, sp, #8
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b20      	cmp	r3, #32
 800232c:	d17c      	bne.n	8002428 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_UART_Transmit+0x2c>
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e075      	b.n	800242a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_UART_Transmit+0x3e>
 8002348:	2302      	movs	r3, #2
 800234a:	e06e      	b.n	800242a <HAL_UART_Transmit+0x11c>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2221      	movs	r2, #33	; 0x21
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002362:	f7fe fe3f 	bl	8000fe4 <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237c:	d108      	bne.n	8002390 <HAL_UART_Transmit+0x82>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e003      	b.n	8002398 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023a0:	e02a      	b.n	80023f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2200      	movs	r2, #0
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fa38 	bl	8002822 <UART_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e036      	b.n	800242a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	3302      	adds	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e007      	b.n	80023ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	3301      	adds	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1cf      	bne.n	80023a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2200      	movs	r2, #0
 800240a:	2140      	movs	r1, #64	; 0x40
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fa08 	bl	8002822 <UART_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e006      	b.n	800242a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	4613      	mov	r3, r2
 800243e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	d11d      	bne.n	8002488 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_UART_Receive_IT+0x26>
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e016      	b.n	800248a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_UART_Receive_IT+0x38>
 8002466:	2302      	movs	r3, #2
 8002468:	e00f      	b.n	800248a <HAL_UART_Receive_IT+0x58>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	461a      	mov	r2, r3
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa19 	bl	80028b6 <UART_Start_Receive_IT>
 8002484:	4603      	mov	r3, r0
 8002486:	e000      	b.n	800248a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_UART_IRQHandler+0x52>
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fac9 	bl	8002a76 <UART_Receive_IT>
      return;
 80024e4:	e17b      	b.n	80027de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80b1 	beq.w	8002650 <HAL_UART_IRQHandler+0x1bc>
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_UART_IRQHandler+0x70>
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a6 	beq.w	8002650 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_UART_IRQHandler+0x90>
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_UART_IRQHandler+0xb0>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f043 0202 	orr.w	r2, r3, #2
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_UART_IRQHandler+0xd0>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f043 0204 	orr.w	r2, r3, #4
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00f      	beq.n	800258e <HAL_UART_IRQHandler+0xfa>
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d104      	bne.n	8002582 <HAL_UART_IRQHandler+0xee>
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f043 0208 	orr.w	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 811e 	beq.w	80027d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_UART_IRQHandler+0x11e>
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fa62 	bl	8002a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <HAL_UART_IRQHandler+0x146>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d031      	beq.n	800263e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f9a4 	bl	8002928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d023      	beq.n	8002636 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	2b00      	cmp	r3, #0
 8002604:	d013      	beq.n	800262e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	4a76      	ldr	r2, [pc, #472]	; (80027e4 <HAL_UART_IRQHandler+0x350>)
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fe5c 	bl	80012d0 <HAL_DMA_Abort_IT>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	e00e      	b.n	800264c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f8e3 	bl	80027fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	e00a      	b.n	800264c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f8df 	bl	80027fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	e006      	b.n	800264c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8db 	bl	80027fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800264a:	e0c3      	b.n	80027d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	bf00      	nop
    return;
 800264e:	e0c1      	b.n	80027d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2b01      	cmp	r3, #1
 8002656:	f040 80a1 	bne.w	800279c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 809b 	beq.w	800279c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8095 	beq.w	800279c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04e      	beq.n	8002734 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80026a0:	8a3b      	ldrh	r3, [r7, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8098 	beq.w	80027d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ac:	8a3a      	ldrh	r2, [r7, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	f080 8092 	bcs.w	80027d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8a3a      	ldrh	r2, [r7, #16]
 80026b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d02b      	beq.n	800271c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0210 	bic.w	r2, r2, #16
 8002710:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fd9f 	bl	800125a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002724:	b29b      	uxth	r3, r3
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	b29b      	uxth	r3, r3
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f86d 	bl	800280c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002732:	e051      	b.n	80027d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800273c:	b29b      	uxth	r3, r3
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d047      	beq.n	80027dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800274c:	8a7b      	ldrh	r3, [r7, #18]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d044      	beq.n	80027dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002760:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0210 	bic.w	r2, r2, #16
 800278e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002790:	8a7b      	ldrh	r3, [r7, #18]
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f839 	bl	800280c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800279a:	e01f      	b.n	80027dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_UART_IRQHandler+0x324>
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f8f9 	bl	80029a8 <UART_Transmit_IT>
    return;
 80027b6:	e012      	b.n	80027de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_UART_IRQHandler+0x34a>
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f93a 	bl	8002a46 <UART_EndTransmit_IT>
    return;
 80027d2:	e004      	b.n	80027de <HAL_UART_IRQHandler+0x34a>
    return;
 80027d4:	bf00      	nop
 80027d6:	e002      	b.n	80027de <HAL_UART_IRQHandler+0x34a>
      return;
 80027d8:	bf00      	nop
 80027da:	e000      	b.n	80027de <HAL_UART_IRQHandler+0x34a>
      return;
 80027dc:	bf00      	nop
  }
}
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	08002981 	.word	0x08002981

080027e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002832:	e02c      	b.n	800288e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d028      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0x30>
 8002842:	f7fe fbcf 	bl	8000fe4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	429a      	cmp	r2, r3
 8002850:	d21d      	bcs.n	800288e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002860:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e00f      	b.n	80028ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d0c3      	beq.n	8002834 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	4613      	mov	r3, r2
 80028c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	88fa      	ldrh	r2, [r7, #6]
 80028ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2222      	movs	r2, #34	; 0x22
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800293e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	2b01      	cmp	r3, #1
 8002956:	d107      	bne.n	8002968 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0210 	bic.w	r2, r2, #16
 8002966:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff ff2d 	bl	80027fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b21      	cmp	r3, #33	; 0x21
 80029ba:	d13e      	bne.n	8002a3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c4:	d114      	bne.n	80029f0 <UART_Transmit_IT+0x48>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d110      	bne.n	80029f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	621a      	str	r2, [r3, #32]
 80029ee:	e008      	b.n	8002a02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	1c59      	adds	r1, r3, #1
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6211      	str	r1, [r2, #32]
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff febe 	bl	80027e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b22      	cmp	r3, #34	; 0x22
 8002a88:	f040 8099 	bne.w	8002bbe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a94:	d117      	bne.n	8002ac6 <UART_Receive_IT+0x50>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d113      	bne.n	8002ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac4:	e026      	b.n	8002b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad8:	d007      	beq.n	8002aea <UART_Receive_IT+0x74>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <UART_Receive_IT+0x82>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e008      	b.n	8002b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4619      	mov	r1, r3
 8002b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d148      	bne.n	8002bba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0220 	bic.w	r2, r2, #32
 8002b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d123      	bne.n	8002bb0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0210 	bic.w	r2, r2, #16
 8002b7c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d10a      	bne.n	8002ba2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff fe2f 	bl	800280c <HAL_UARTEx_RxEventCallback>
 8002bae:	e002      	b.n	8002bb6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7fd fff7 	bl	8000ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e002      	b.n	8002bc0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c02:	f023 030c 	bic.w	r3, r3, #12
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2c      	ldr	r2, [pc, #176]	; (8002cdc <UART_SetConfig+0x114>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d103      	bne.n	8002c38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7ff faee 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	e002      	b.n	8002c3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c38:	f7ff fad6 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	009a      	lsls	r2, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <UART_SetConfig+0x118>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	0119      	lsls	r1, r3, #4
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009a      	lsls	r2, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <UART_SetConfig+0x118>)
 8002c76:	fba3 0302 	umull	r0, r3, r3, r2
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2064      	movs	r0, #100	; 0x64
 8002c7e:	fb00 f303 	mul.w	r3, r0, r3
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	3332      	adds	r3, #50	; 0x32
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <UART_SetConfig+0x118>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c94:	4419      	add	r1, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <UART_SetConfig+0x118>)
 8002cae:	fba3 0302 	umull	r0, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2064      	movs	r0, #100	; 0x64
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	3332      	adds	r3, #50	; 0x32
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <UART_SetConfig+0x118>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	f003 020f 	and.w	r2, r3, #15
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	51eb851f 	.word	0x51eb851f

08002ce4 <atoi>:
 8002ce4:	220a      	movs	r2, #10
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f000 b93c 	b.w	8002f64 <strtol>

08002cec <__errno>:
 8002cec:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <__errno+0x8>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	200002c8 	.word	0x200002c8

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	2600      	movs	r6, #0
 8002cfc:	4d0c      	ldr	r5, [pc, #48]	; (8002d30 <__libc_init_array+0x38>)
 8002cfe:	4c0d      	ldr	r4, [pc, #52]	; (8002d34 <__libc_init_array+0x3c>)
 8002d00:	1b64      	subs	r4, r4, r5
 8002d02:	10a4      	asrs	r4, r4, #2
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	f001 f8b2 	bl	8003e70 <_init>
 8002d0c:	2600      	movs	r6, #0
 8002d0e:	4d0a      	ldr	r5, [pc, #40]	; (8002d38 <__libc_init_array+0x40>)
 8002d10:	4c0a      	ldr	r4, [pc, #40]	; (8002d3c <__libc_init_array+0x44>)
 8002d12:	1b64      	subs	r4, r4, r5
 8002d14:	10a4      	asrs	r4, r4, #2
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	4798      	blx	r3
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	4798      	blx	r3
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	08004090 	.word	0x08004090
 8002d34:	08004090 	.word	0x08004090
 8002d38:	08004090 	.word	0x08004090
 8002d3c:	08004094 	.word	0x08004094

08002d40 <memset>:
 8002d40:	4603      	mov	r3, r0
 8002d42:	4402      	add	r2, r0
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d100      	bne.n	8002d4a <memset+0xa>
 8002d48:	4770      	bx	lr
 8002d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4e:	e7f9      	b.n	8002d44 <memset+0x4>

08002d50 <iprintf>:
 8002d50:	b40f      	push	{r0, r1, r2, r3}
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <iprintf+0x2c>)
 8002d54:	b513      	push	{r0, r1, r4, lr}
 8002d56:	681c      	ldr	r4, [r3, #0]
 8002d58:	b124      	cbz	r4, 8002d64 <iprintf+0x14>
 8002d5a:	69a3      	ldr	r3, [r4, #24]
 8002d5c:	b913      	cbnz	r3, 8002d64 <iprintf+0x14>
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f000 fae0 	bl	8003324 <__sinit>
 8002d64:	ab05      	add	r3, sp, #20
 8002d66:	4620      	mov	r0, r4
 8002d68:	9a04      	ldr	r2, [sp, #16]
 8002d6a:	68a1      	ldr	r1, [r4, #8]
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	f000 fce3 	bl	8003738 <_vfiprintf_r>
 8002d72:	b002      	add	sp, #8
 8002d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d78:	b004      	add	sp, #16
 8002d7a:	4770      	bx	lr
 8002d7c:	200002c8 	.word	0x200002c8

08002d80 <_puts_r>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	460e      	mov	r6, r1
 8002d84:	4605      	mov	r5, r0
 8002d86:	b118      	cbz	r0, 8002d90 <_puts_r+0x10>
 8002d88:	6983      	ldr	r3, [r0, #24]
 8002d8a:	b90b      	cbnz	r3, 8002d90 <_puts_r+0x10>
 8002d8c:	f000 faca 	bl	8003324 <__sinit>
 8002d90:	69ab      	ldr	r3, [r5, #24]
 8002d92:	68ac      	ldr	r4, [r5, #8]
 8002d94:	b913      	cbnz	r3, 8002d9c <_puts_r+0x1c>
 8002d96:	4628      	mov	r0, r5
 8002d98:	f000 fac4 	bl	8003324 <__sinit>
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <_puts_r+0xd0>)
 8002d9e:	429c      	cmp	r4, r3
 8002da0:	d120      	bne.n	8002de4 <_puts_r+0x64>
 8002da2:	686c      	ldr	r4, [r5, #4]
 8002da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002da6:	07db      	lsls	r3, r3, #31
 8002da8:	d405      	bmi.n	8002db6 <_puts_r+0x36>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	0598      	lsls	r0, r3, #22
 8002dae:	d402      	bmi.n	8002db6 <_puts_r+0x36>
 8002db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002db2:	f000 fb55 	bl	8003460 <__retarget_lock_acquire_recursive>
 8002db6:	89a3      	ldrh	r3, [r4, #12]
 8002db8:	0719      	lsls	r1, r3, #28
 8002dba:	d51d      	bpl.n	8002df8 <_puts_r+0x78>
 8002dbc:	6923      	ldr	r3, [r4, #16]
 8002dbe:	b1db      	cbz	r3, 8002df8 <_puts_r+0x78>
 8002dc0:	3e01      	subs	r6, #1
 8002dc2:	68a3      	ldr	r3, [r4, #8]
 8002dc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60a3      	str	r3, [r4, #8]
 8002dcc:	bb39      	cbnz	r1, 8002e1e <_puts_r+0x9e>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da38      	bge.n	8002e44 <_puts_r+0xc4>
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	210a      	movs	r1, #10
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f000 f8ce 	bl	8002f78 <__swbuf_r>
 8002ddc:	3001      	adds	r0, #1
 8002dde:	d011      	beq.n	8002e04 <_puts_r+0x84>
 8002de0:	250a      	movs	r5, #10
 8002de2:	e011      	b.n	8002e08 <_puts_r+0x88>
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <_puts_r+0xd4>)
 8002de6:	429c      	cmp	r4, r3
 8002de8:	d101      	bne.n	8002dee <_puts_r+0x6e>
 8002dea:	68ac      	ldr	r4, [r5, #8]
 8002dec:	e7da      	b.n	8002da4 <_puts_r+0x24>
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <_puts_r+0xd8>)
 8002df0:	429c      	cmp	r4, r3
 8002df2:	bf08      	it	eq
 8002df4:	68ec      	ldreq	r4, [r5, #12]
 8002df6:	e7d5      	b.n	8002da4 <_puts_r+0x24>
 8002df8:	4621      	mov	r1, r4
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f000 f90e 	bl	800301c <__swsetup_r>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d0dd      	beq.n	8002dc0 <_puts_r+0x40>
 8002e04:	f04f 35ff 	mov.w	r5, #4294967295
 8002e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e0a:	07da      	lsls	r2, r3, #31
 8002e0c:	d405      	bmi.n	8002e1a <_puts_r+0x9a>
 8002e0e:	89a3      	ldrh	r3, [r4, #12]
 8002e10:	059b      	lsls	r3, r3, #22
 8002e12:	d402      	bmi.n	8002e1a <_puts_r+0x9a>
 8002e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e16:	f000 fb24 	bl	8003462 <__retarget_lock_release_recursive>
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	da04      	bge.n	8002e2c <_puts_r+0xac>
 8002e22:	69a2      	ldr	r2, [r4, #24]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dc06      	bgt.n	8002e36 <_puts_r+0xb6>
 8002e28:	290a      	cmp	r1, #10
 8002e2a:	d004      	beq.n	8002e36 <_puts_r+0xb6>
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	6022      	str	r2, [r4, #0]
 8002e32:	7019      	strb	r1, [r3, #0]
 8002e34:	e7c5      	b.n	8002dc2 <_puts_r+0x42>
 8002e36:	4622      	mov	r2, r4
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f000 f89d 	bl	8002f78 <__swbuf_r>
 8002e3e:	3001      	adds	r0, #1
 8002e40:	d1bf      	bne.n	8002dc2 <_puts_r+0x42>
 8002e42:	e7df      	b.n	8002e04 <_puts_r+0x84>
 8002e44:	250a      	movs	r5, #10
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	6022      	str	r2, [r4, #0]
 8002e4c:	701d      	strb	r5, [r3, #0]
 8002e4e:	e7db      	b.n	8002e08 <_puts_r+0x88>
 8002e50:	08004014 	.word	0x08004014
 8002e54:	08004034 	.word	0x08004034
 8002e58:	08003ff4 	.word	0x08003ff4

08002e5c <puts>:
 8002e5c:	4b02      	ldr	r3, [pc, #8]	; (8002e68 <puts+0xc>)
 8002e5e:	4601      	mov	r1, r0
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	f7ff bf8d 	b.w	8002d80 <_puts_r>
 8002e66:	bf00      	nop
 8002e68:	200002c8 	.word	0x200002c8

08002e6c <_strtol_l.constprop.0>:
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e72:	4680      	mov	r8, r0
 8002e74:	d001      	beq.n	8002e7a <_strtol_l.constprop.0+0xe>
 8002e76:	2b24      	cmp	r3, #36	; 0x24
 8002e78:	d906      	bls.n	8002e88 <_strtol_l.constprop.0+0x1c>
 8002e7a:	f7ff ff37 	bl	8002cec <__errno>
 8002e7e:	2316      	movs	r3, #22
 8002e80:	6003      	str	r3, [r0, #0]
 8002e82:	2000      	movs	r0, #0
 8002e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e88:	460d      	mov	r5, r1
 8002e8a:	4f35      	ldr	r7, [pc, #212]	; (8002f60 <_strtol_l.constprop.0+0xf4>)
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e92:	5de6      	ldrb	r6, [r4, r7]
 8002e94:	f016 0608 	ands.w	r6, r6, #8
 8002e98:	d1f8      	bne.n	8002e8c <_strtol_l.constprop.0+0x20>
 8002e9a:	2c2d      	cmp	r4, #45	; 0x2d
 8002e9c:	d12f      	bne.n	8002efe <_strtol_l.constprop.0+0x92>
 8002e9e:	2601      	movs	r6, #1
 8002ea0:	782c      	ldrb	r4, [r5, #0]
 8002ea2:	1c85      	adds	r5, r0, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d057      	beq.n	8002f58 <_strtol_l.constprop.0+0xec>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d109      	bne.n	8002ec0 <_strtol_l.constprop.0+0x54>
 8002eac:	2c30      	cmp	r4, #48	; 0x30
 8002eae:	d107      	bne.n	8002ec0 <_strtol_l.constprop.0+0x54>
 8002eb0:	7828      	ldrb	r0, [r5, #0]
 8002eb2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002eb6:	2858      	cmp	r0, #88	; 0x58
 8002eb8:	d149      	bne.n	8002f4e <_strtol_l.constprop.0+0xe2>
 8002eba:	2310      	movs	r3, #16
 8002ebc:	786c      	ldrb	r4, [r5, #1]
 8002ebe:	3502      	adds	r5, #2
 8002ec0:	2700      	movs	r7, #0
 8002ec2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002ec6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002eca:	fbbe f9f3 	udiv	r9, lr, r3
 8002ece:	4638      	mov	r0, r7
 8002ed0:	fb03 ea19 	mls	sl, r3, r9, lr
 8002ed4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002ed8:	f1bc 0f09 	cmp.w	ip, #9
 8002edc:	d814      	bhi.n	8002f08 <_strtol_l.constprop.0+0x9c>
 8002ede:	4664      	mov	r4, ip
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	dd22      	ble.n	8002f2a <_strtol_l.constprop.0+0xbe>
 8002ee4:	2f00      	cmp	r7, #0
 8002ee6:	db1d      	blt.n	8002f24 <_strtol_l.constprop.0+0xb8>
 8002ee8:	4581      	cmp	r9, r0
 8002eea:	d31b      	bcc.n	8002f24 <_strtol_l.constprop.0+0xb8>
 8002eec:	d101      	bne.n	8002ef2 <_strtol_l.constprop.0+0x86>
 8002eee:	45a2      	cmp	sl, r4
 8002ef0:	db18      	blt.n	8002f24 <_strtol_l.constprop.0+0xb8>
 8002ef2:	2701      	movs	r7, #1
 8002ef4:	fb00 4003 	mla	r0, r0, r3, r4
 8002ef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002efc:	e7ea      	b.n	8002ed4 <_strtol_l.constprop.0+0x68>
 8002efe:	2c2b      	cmp	r4, #43	; 0x2b
 8002f00:	bf04      	itt	eq
 8002f02:	782c      	ldrbeq	r4, [r5, #0]
 8002f04:	1c85      	addeq	r5, r0, #2
 8002f06:	e7cd      	b.n	8002ea4 <_strtol_l.constprop.0+0x38>
 8002f08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002f0c:	f1bc 0f19 	cmp.w	ip, #25
 8002f10:	d801      	bhi.n	8002f16 <_strtol_l.constprop.0+0xaa>
 8002f12:	3c37      	subs	r4, #55	; 0x37
 8002f14:	e7e4      	b.n	8002ee0 <_strtol_l.constprop.0+0x74>
 8002f16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002f1a:	f1bc 0f19 	cmp.w	ip, #25
 8002f1e:	d804      	bhi.n	8002f2a <_strtol_l.constprop.0+0xbe>
 8002f20:	3c57      	subs	r4, #87	; 0x57
 8002f22:	e7dd      	b.n	8002ee0 <_strtol_l.constprop.0+0x74>
 8002f24:	f04f 37ff 	mov.w	r7, #4294967295
 8002f28:	e7e6      	b.n	8002ef8 <_strtol_l.constprop.0+0x8c>
 8002f2a:	2f00      	cmp	r7, #0
 8002f2c:	da07      	bge.n	8002f3e <_strtol_l.constprop.0+0xd2>
 8002f2e:	2322      	movs	r3, #34	; 0x22
 8002f30:	4670      	mov	r0, lr
 8002f32:	f8c8 3000 	str.w	r3, [r8]
 8002f36:	2a00      	cmp	r2, #0
 8002f38:	d0a4      	beq.n	8002e84 <_strtol_l.constprop.0+0x18>
 8002f3a:	1e69      	subs	r1, r5, #1
 8002f3c:	e005      	b.n	8002f4a <_strtol_l.constprop.0+0xde>
 8002f3e:	b106      	cbz	r6, 8002f42 <_strtol_l.constprop.0+0xd6>
 8002f40:	4240      	negs	r0, r0
 8002f42:	2a00      	cmp	r2, #0
 8002f44:	d09e      	beq.n	8002e84 <_strtol_l.constprop.0+0x18>
 8002f46:	2f00      	cmp	r7, #0
 8002f48:	d1f7      	bne.n	8002f3a <_strtol_l.constprop.0+0xce>
 8002f4a:	6011      	str	r1, [r2, #0]
 8002f4c:	e79a      	b.n	8002e84 <_strtol_l.constprop.0+0x18>
 8002f4e:	2430      	movs	r4, #48	; 0x30
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1b5      	bne.n	8002ec0 <_strtol_l.constprop.0+0x54>
 8002f54:	2308      	movs	r3, #8
 8002f56:	e7b3      	b.n	8002ec0 <_strtol_l.constprop.0+0x54>
 8002f58:	2c30      	cmp	r4, #48	; 0x30
 8002f5a:	d0a9      	beq.n	8002eb0 <_strtol_l.constprop.0+0x44>
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	e7af      	b.n	8002ec0 <_strtol_l.constprop.0+0x54>
 8002f60:	08003ef1 	.word	0x08003ef1

08002f64 <strtol>:
 8002f64:	4613      	mov	r3, r2
 8002f66:	460a      	mov	r2, r1
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4802      	ldr	r0, [pc, #8]	; (8002f74 <strtol+0x10>)
 8002f6c:	6800      	ldr	r0, [r0, #0]
 8002f6e:	f7ff bf7d 	b.w	8002e6c <_strtol_l.constprop.0>
 8002f72:	bf00      	nop
 8002f74:	200002c8 	.word	0x200002c8

08002f78 <__swbuf_r>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	460e      	mov	r6, r1
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	4605      	mov	r5, r0
 8002f80:	b118      	cbz	r0, 8002f8a <__swbuf_r+0x12>
 8002f82:	6983      	ldr	r3, [r0, #24]
 8002f84:	b90b      	cbnz	r3, 8002f8a <__swbuf_r+0x12>
 8002f86:	f000 f9cd 	bl	8003324 <__sinit>
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <__swbuf_r+0x98>)
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	d12b      	bne.n	8002fe8 <__swbuf_r+0x70>
 8002f90:	686c      	ldr	r4, [r5, #4]
 8002f92:	69a3      	ldr	r3, [r4, #24]
 8002f94:	60a3      	str	r3, [r4, #8]
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	071a      	lsls	r2, r3, #28
 8002f9a:	d52f      	bpl.n	8002ffc <__swbuf_r+0x84>
 8002f9c:	6923      	ldr	r3, [r4, #16]
 8002f9e:	b36b      	cbz	r3, 8002ffc <__swbuf_r+0x84>
 8002fa0:	6923      	ldr	r3, [r4, #16]
 8002fa2:	6820      	ldr	r0, [r4, #0]
 8002fa4:	b2f6      	uxtb	r6, r6
 8002fa6:	1ac0      	subs	r0, r0, r3
 8002fa8:	6963      	ldr	r3, [r4, #20]
 8002faa:	4637      	mov	r7, r6
 8002fac:	4283      	cmp	r3, r0
 8002fae:	dc04      	bgt.n	8002fba <__swbuf_r+0x42>
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f000 f922 	bl	80031fc <_fflush_r>
 8002fb8:	bb30      	cbnz	r0, 8003008 <__swbuf_r+0x90>
 8002fba:	68a3      	ldr	r3, [r4, #8]
 8002fbc:	3001      	adds	r0, #1
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	60a3      	str	r3, [r4, #8]
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	6022      	str	r2, [r4, #0]
 8002fc8:	701e      	strb	r6, [r3, #0]
 8002fca:	6963      	ldr	r3, [r4, #20]
 8002fcc:	4283      	cmp	r3, r0
 8002fce:	d004      	beq.n	8002fda <__swbuf_r+0x62>
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	07db      	lsls	r3, r3, #31
 8002fd4:	d506      	bpl.n	8002fe4 <__swbuf_r+0x6c>
 8002fd6:	2e0a      	cmp	r6, #10
 8002fd8:	d104      	bne.n	8002fe4 <__swbuf_r+0x6c>
 8002fda:	4621      	mov	r1, r4
 8002fdc:	4628      	mov	r0, r5
 8002fde:	f000 f90d 	bl	80031fc <_fflush_r>
 8002fe2:	b988      	cbnz	r0, 8003008 <__swbuf_r+0x90>
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <__swbuf_r+0x9c>)
 8002fea:	429c      	cmp	r4, r3
 8002fec:	d101      	bne.n	8002ff2 <__swbuf_r+0x7a>
 8002fee:	68ac      	ldr	r4, [r5, #8]
 8002ff0:	e7cf      	b.n	8002f92 <__swbuf_r+0x1a>
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <__swbuf_r+0xa0>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	bf08      	it	eq
 8002ff8:	68ec      	ldreq	r4, [r5, #12]
 8002ffa:	e7ca      	b.n	8002f92 <__swbuf_r+0x1a>
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 f80c 	bl	800301c <__swsetup_r>
 8003004:	2800      	cmp	r0, #0
 8003006:	d0cb      	beq.n	8002fa0 <__swbuf_r+0x28>
 8003008:	f04f 37ff 	mov.w	r7, #4294967295
 800300c:	e7ea      	b.n	8002fe4 <__swbuf_r+0x6c>
 800300e:	bf00      	nop
 8003010:	08004014 	.word	0x08004014
 8003014:	08004034 	.word	0x08004034
 8003018:	08003ff4 	.word	0x08003ff4

0800301c <__swsetup_r>:
 800301c:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <__swsetup_r+0xcc>)
 800301e:	b570      	push	{r4, r5, r6, lr}
 8003020:	681d      	ldr	r5, [r3, #0]
 8003022:	4606      	mov	r6, r0
 8003024:	460c      	mov	r4, r1
 8003026:	b125      	cbz	r5, 8003032 <__swsetup_r+0x16>
 8003028:	69ab      	ldr	r3, [r5, #24]
 800302a:	b913      	cbnz	r3, 8003032 <__swsetup_r+0x16>
 800302c:	4628      	mov	r0, r5
 800302e:	f000 f979 	bl	8003324 <__sinit>
 8003032:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <__swsetup_r+0xd0>)
 8003034:	429c      	cmp	r4, r3
 8003036:	d10f      	bne.n	8003058 <__swsetup_r+0x3c>
 8003038:	686c      	ldr	r4, [r5, #4]
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003040:	0719      	lsls	r1, r3, #28
 8003042:	d42c      	bmi.n	800309e <__swsetup_r+0x82>
 8003044:	06dd      	lsls	r5, r3, #27
 8003046:	d411      	bmi.n	800306c <__swsetup_r+0x50>
 8003048:	2309      	movs	r3, #9
 800304a:	6033      	str	r3, [r6, #0]
 800304c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	81a3      	strh	r3, [r4, #12]
 8003056:	e03e      	b.n	80030d6 <__swsetup_r+0xba>
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <__swsetup_r+0xd4>)
 800305a:	429c      	cmp	r4, r3
 800305c:	d101      	bne.n	8003062 <__swsetup_r+0x46>
 800305e:	68ac      	ldr	r4, [r5, #8]
 8003060:	e7eb      	b.n	800303a <__swsetup_r+0x1e>
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <__swsetup_r+0xd8>)
 8003064:	429c      	cmp	r4, r3
 8003066:	bf08      	it	eq
 8003068:	68ec      	ldreq	r4, [r5, #12]
 800306a:	e7e6      	b.n	800303a <__swsetup_r+0x1e>
 800306c:	0758      	lsls	r0, r3, #29
 800306e:	d512      	bpl.n	8003096 <__swsetup_r+0x7a>
 8003070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003072:	b141      	cbz	r1, 8003086 <__swsetup_r+0x6a>
 8003074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003078:	4299      	cmp	r1, r3
 800307a:	d002      	beq.n	8003082 <__swsetup_r+0x66>
 800307c:	4630      	mov	r0, r6
 800307e:	f000 fa57 	bl	8003530 <_free_r>
 8003082:	2300      	movs	r3, #0
 8003084:	6363      	str	r3, [r4, #52]	; 0x34
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800308c:	81a3      	strh	r3, [r4, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	6063      	str	r3, [r4, #4]
 8003092:	6923      	ldr	r3, [r4, #16]
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	81a3      	strh	r3, [r4, #12]
 800309e:	6923      	ldr	r3, [r4, #16]
 80030a0:	b94b      	cbnz	r3, 80030b6 <__swsetup_r+0x9a>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ac:	d003      	beq.n	80030b6 <__swsetup_r+0x9a>
 80030ae:	4621      	mov	r1, r4
 80030b0:	4630      	mov	r0, r6
 80030b2:	f000 f9fd 	bl	80034b0 <__smakebuf_r>
 80030b6:	89a0      	ldrh	r0, [r4, #12]
 80030b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030bc:	f010 0301 	ands.w	r3, r0, #1
 80030c0:	d00a      	beq.n	80030d8 <__swsetup_r+0xbc>
 80030c2:	2300      	movs	r3, #0
 80030c4:	60a3      	str	r3, [r4, #8]
 80030c6:	6963      	ldr	r3, [r4, #20]
 80030c8:	425b      	negs	r3, r3
 80030ca:	61a3      	str	r3, [r4, #24]
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	b943      	cbnz	r3, 80030e2 <__swsetup_r+0xc6>
 80030d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030d4:	d1ba      	bne.n	800304c <__swsetup_r+0x30>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	0781      	lsls	r1, r0, #30
 80030da:	bf58      	it	pl
 80030dc:	6963      	ldrpl	r3, [r4, #20]
 80030de:	60a3      	str	r3, [r4, #8]
 80030e0:	e7f4      	b.n	80030cc <__swsetup_r+0xb0>
 80030e2:	2000      	movs	r0, #0
 80030e4:	e7f7      	b.n	80030d6 <__swsetup_r+0xba>
 80030e6:	bf00      	nop
 80030e8:	200002c8 	.word	0x200002c8
 80030ec:	08004014 	.word	0x08004014
 80030f0:	08004034 	.word	0x08004034
 80030f4:	08003ff4 	.word	0x08003ff4

080030f8 <__sflush_r>:
 80030f8:	898a      	ldrh	r2, [r1, #12]
 80030fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fc:	4605      	mov	r5, r0
 80030fe:	0710      	lsls	r0, r2, #28
 8003100:	460c      	mov	r4, r1
 8003102:	d457      	bmi.n	80031b4 <__sflush_r+0xbc>
 8003104:	684b      	ldr	r3, [r1, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	dc04      	bgt.n	8003114 <__sflush_r+0x1c>
 800310a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	dc01      	bgt.n	8003114 <__sflush_r+0x1c>
 8003110:	2000      	movs	r0, #0
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003116:	2e00      	cmp	r6, #0
 8003118:	d0fa      	beq.n	8003110 <__sflush_r+0x18>
 800311a:	2300      	movs	r3, #0
 800311c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003120:	682f      	ldr	r7, [r5, #0]
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	d032      	beq.n	800318c <__sflush_r+0x94>
 8003126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	075a      	lsls	r2, r3, #29
 800312c:	d505      	bpl.n	800313a <__sflush_r+0x42>
 800312e:	6863      	ldr	r3, [r4, #4]
 8003130:	1ac0      	subs	r0, r0, r3
 8003132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003134:	b10b      	cbz	r3, 800313a <__sflush_r+0x42>
 8003136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003138:	1ac0      	subs	r0, r0, r3
 800313a:	2300      	movs	r3, #0
 800313c:	4602      	mov	r2, r0
 800313e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003140:	4628      	mov	r0, r5
 8003142:	6a21      	ldr	r1, [r4, #32]
 8003144:	47b0      	blx	r6
 8003146:	1c43      	adds	r3, r0, #1
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	d106      	bne.n	800315a <__sflush_r+0x62>
 800314c:	6829      	ldr	r1, [r5, #0]
 800314e:	291d      	cmp	r1, #29
 8003150:	d82c      	bhi.n	80031ac <__sflush_r+0xb4>
 8003152:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <__sflush_r+0x100>)
 8003154:	40ca      	lsrs	r2, r1
 8003156:	07d6      	lsls	r6, r2, #31
 8003158:	d528      	bpl.n	80031ac <__sflush_r+0xb4>
 800315a:	2200      	movs	r2, #0
 800315c:	6062      	str	r2, [r4, #4]
 800315e:	6922      	ldr	r2, [r4, #16]
 8003160:	04d9      	lsls	r1, r3, #19
 8003162:	6022      	str	r2, [r4, #0]
 8003164:	d504      	bpl.n	8003170 <__sflush_r+0x78>
 8003166:	1c42      	adds	r2, r0, #1
 8003168:	d101      	bne.n	800316e <__sflush_r+0x76>
 800316a:	682b      	ldr	r3, [r5, #0]
 800316c:	b903      	cbnz	r3, 8003170 <__sflush_r+0x78>
 800316e:	6560      	str	r0, [r4, #84]	; 0x54
 8003170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003172:	602f      	str	r7, [r5, #0]
 8003174:	2900      	cmp	r1, #0
 8003176:	d0cb      	beq.n	8003110 <__sflush_r+0x18>
 8003178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800317c:	4299      	cmp	r1, r3
 800317e:	d002      	beq.n	8003186 <__sflush_r+0x8e>
 8003180:	4628      	mov	r0, r5
 8003182:	f000 f9d5 	bl	8003530 <_free_r>
 8003186:	2000      	movs	r0, #0
 8003188:	6360      	str	r0, [r4, #52]	; 0x34
 800318a:	e7c2      	b.n	8003112 <__sflush_r+0x1a>
 800318c:	6a21      	ldr	r1, [r4, #32]
 800318e:	2301      	movs	r3, #1
 8003190:	4628      	mov	r0, r5
 8003192:	47b0      	blx	r6
 8003194:	1c41      	adds	r1, r0, #1
 8003196:	d1c7      	bne.n	8003128 <__sflush_r+0x30>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0c4      	beq.n	8003128 <__sflush_r+0x30>
 800319e:	2b1d      	cmp	r3, #29
 80031a0:	d001      	beq.n	80031a6 <__sflush_r+0xae>
 80031a2:	2b16      	cmp	r3, #22
 80031a4:	d101      	bne.n	80031aa <__sflush_r+0xb2>
 80031a6:	602f      	str	r7, [r5, #0]
 80031a8:	e7b2      	b.n	8003110 <__sflush_r+0x18>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b0:	81a3      	strh	r3, [r4, #12]
 80031b2:	e7ae      	b.n	8003112 <__sflush_r+0x1a>
 80031b4:	690f      	ldr	r7, [r1, #16]
 80031b6:	2f00      	cmp	r7, #0
 80031b8:	d0aa      	beq.n	8003110 <__sflush_r+0x18>
 80031ba:	0793      	lsls	r3, r2, #30
 80031bc:	bf18      	it	ne
 80031be:	2300      	movne	r3, #0
 80031c0:	680e      	ldr	r6, [r1, #0]
 80031c2:	bf08      	it	eq
 80031c4:	694b      	ldreq	r3, [r1, #20]
 80031c6:	1bf6      	subs	r6, r6, r7
 80031c8:	600f      	str	r7, [r1, #0]
 80031ca:	608b      	str	r3, [r1, #8]
 80031cc:	2e00      	cmp	r6, #0
 80031ce:	dd9f      	ble.n	8003110 <__sflush_r+0x18>
 80031d0:	4633      	mov	r3, r6
 80031d2:	463a      	mov	r2, r7
 80031d4:	4628      	mov	r0, r5
 80031d6:	6a21      	ldr	r1, [r4, #32]
 80031d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80031dc:	47e0      	blx	ip
 80031de:	2800      	cmp	r0, #0
 80031e0:	dc06      	bgt.n	80031f0 <__sflush_r+0xf8>
 80031e2:	89a3      	ldrh	r3, [r4, #12]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	e790      	b.n	8003112 <__sflush_r+0x1a>
 80031f0:	4407      	add	r7, r0
 80031f2:	1a36      	subs	r6, r6, r0
 80031f4:	e7ea      	b.n	80031cc <__sflush_r+0xd4>
 80031f6:	bf00      	nop
 80031f8:	20400001 	.word	0x20400001

080031fc <_fflush_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	690b      	ldr	r3, [r1, #16]
 8003200:	4605      	mov	r5, r0
 8003202:	460c      	mov	r4, r1
 8003204:	b913      	cbnz	r3, 800320c <_fflush_r+0x10>
 8003206:	2500      	movs	r5, #0
 8003208:	4628      	mov	r0, r5
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	b118      	cbz	r0, 8003216 <_fflush_r+0x1a>
 800320e:	6983      	ldr	r3, [r0, #24]
 8003210:	b90b      	cbnz	r3, 8003216 <_fflush_r+0x1a>
 8003212:	f000 f887 	bl	8003324 <__sinit>
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <_fflush_r+0x6c>)
 8003218:	429c      	cmp	r4, r3
 800321a:	d11b      	bne.n	8003254 <_fflush_r+0x58>
 800321c:	686c      	ldr	r4, [r5, #4]
 800321e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ef      	beq.n	8003206 <_fflush_r+0xa>
 8003226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003228:	07d0      	lsls	r0, r2, #31
 800322a:	d404      	bmi.n	8003236 <_fflush_r+0x3a>
 800322c:	0599      	lsls	r1, r3, #22
 800322e:	d402      	bmi.n	8003236 <_fflush_r+0x3a>
 8003230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003232:	f000 f915 	bl	8003460 <__retarget_lock_acquire_recursive>
 8003236:	4628      	mov	r0, r5
 8003238:	4621      	mov	r1, r4
 800323a:	f7ff ff5d 	bl	80030f8 <__sflush_r>
 800323e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003240:	4605      	mov	r5, r0
 8003242:	07da      	lsls	r2, r3, #31
 8003244:	d4e0      	bmi.n	8003208 <_fflush_r+0xc>
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	059b      	lsls	r3, r3, #22
 800324a:	d4dd      	bmi.n	8003208 <_fflush_r+0xc>
 800324c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800324e:	f000 f908 	bl	8003462 <__retarget_lock_release_recursive>
 8003252:	e7d9      	b.n	8003208 <_fflush_r+0xc>
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <_fflush_r+0x70>)
 8003256:	429c      	cmp	r4, r3
 8003258:	d101      	bne.n	800325e <_fflush_r+0x62>
 800325a:	68ac      	ldr	r4, [r5, #8]
 800325c:	e7df      	b.n	800321e <_fflush_r+0x22>
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <_fflush_r+0x74>)
 8003260:	429c      	cmp	r4, r3
 8003262:	bf08      	it	eq
 8003264:	68ec      	ldreq	r4, [r5, #12]
 8003266:	e7da      	b.n	800321e <_fflush_r+0x22>
 8003268:	08004014 	.word	0x08004014
 800326c:	08004034 	.word	0x08004034
 8003270:	08003ff4 	.word	0x08003ff4

08003274 <std>:
 8003274:	2300      	movs	r3, #0
 8003276:	b510      	push	{r4, lr}
 8003278:	4604      	mov	r4, r0
 800327a:	e9c0 3300 	strd	r3, r3, [r0]
 800327e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003282:	6083      	str	r3, [r0, #8]
 8003284:	8181      	strh	r1, [r0, #12]
 8003286:	6643      	str	r3, [r0, #100]	; 0x64
 8003288:	81c2      	strh	r2, [r0, #14]
 800328a:	6183      	str	r3, [r0, #24]
 800328c:	4619      	mov	r1, r3
 800328e:	2208      	movs	r2, #8
 8003290:	305c      	adds	r0, #92	; 0x5c
 8003292:	f7ff fd55 	bl	8002d40 <memset>
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <std+0x38>)
 8003298:	6224      	str	r4, [r4, #32]
 800329a:	6263      	str	r3, [r4, #36]	; 0x24
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <std+0x3c>)
 800329e:	62a3      	str	r3, [r4, #40]	; 0x28
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <std+0x40>)
 80032a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <std+0x44>)
 80032a6:	6323      	str	r3, [r4, #48]	; 0x30
 80032a8:	bd10      	pop	{r4, pc}
 80032aa:	bf00      	nop
 80032ac:	08003ce5 	.word	0x08003ce5
 80032b0:	08003d07 	.word	0x08003d07
 80032b4:	08003d3f 	.word	0x08003d3f
 80032b8:	08003d63 	.word	0x08003d63

080032bc <_cleanup_r>:
 80032bc:	4901      	ldr	r1, [pc, #4]	; (80032c4 <_cleanup_r+0x8>)
 80032be:	f000 b8af 	b.w	8003420 <_fwalk_reent>
 80032c2:	bf00      	nop
 80032c4:	080031fd 	.word	0x080031fd

080032c8 <__sfmoreglue>:
 80032c8:	2268      	movs	r2, #104	; 0x68
 80032ca:	b570      	push	{r4, r5, r6, lr}
 80032cc:	1e4d      	subs	r5, r1, #1
 80032ce:	4355      	muls	r5, r2
 80032d0:	460e      	mov	r6, r1
 80032d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032d6:	f000 f993 	bl	8003600 <_malloc_r>
 80032da:	4604      	mov	r4, r0
 80032dc:	b140      	cbz	r0, 80032f0 <__sfmoreglue+0x28>
 80032de:	2100      	movs	r1, #0
 80032e0:	e9c0 1600 	strd	r1, r6, [r0]
 80032e4:	300c      	adds	r0, #12
 80032e6:	60a0      	str	r0, [r4, #8]
 80032e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032ec:	f7ff fd28 	bl	8002d40 <memset>
 80032f0:	4620      	mov	r0, r4
 80032f2:	bd70      	pop	{r4, r5, r6, pc}

080032f4 <__sfp_lock_acquire>:
 80032f4:	4801      	ldr	r0, [pc, #4]	; (80032fc <__sfp_lock_acquire+0x8>)
 80032f6:	f000 b8b3 	b.w	8003460 <__retarget_lock_acquire_recursive>
 80032fa:	bf00      	nop
 80032fc:	200004c1 	.word	0x200004c1

08003300 <__sfp_lock_release>:
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <__sfp_lock_release+0x8>)
 8003302:	f000 b8ae 	b.w	8003462 <__retarget_lock_release_recursive>
 8003306:	bf00      	nop
 8003308:	200004c1 	.word	0x200004c1

0800330c <__sinit_lock_acquire>:
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <__sinit_lock_acquire+0x8>)
 800330e:	f000 b8a7 	b.w	8003460 <__retarget_lock_acquire_recursive>
 8003312:	bf00      	nop
 8003314:	200004c2 	.word	0x200004c2

08003318 <__sinit_lock_release>:
 8003318:	4801      	ldr	r0, [pc, #4]	; (8003320 <__sinit_lock_release+0x8>)
 800331a:	f000 b8a2 	b.w	8003462 <__retarget_lock_release_recursive>
 800331e:	bf00      	nop
 8003320:	200004c2 	.word	0x200004c2

08003324 <__sinit>:
 8003324:	b510      	push	{r4, lr}
 8003326:	4604      	mov	r4, r0
 8003328:	f7ff fff0 	bl	800330c <__sinit_lock_acquire>
 800332c:	69a3      	ldr	r3, [r4, #24]
 800332e:	b11b      	cbz	r3, 8003338 <__sinit+0x14>
 8003330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003334:	f7ff bff0 	b.w	8003318 <__sinit_lock_release>
 8003338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800333c:	6523      	str	r3, [r4, #80]	; 0x50
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <__sinit+0x68>)
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <__sinit+0x6c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	62a2      	str	r2, [r4, #40]	; 0x28
 8003346:	42a3      	cmp	r3, r4
 8003348:	bf08      	it	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	4620      	mov	r0, r4
 800334e:	bf08      	it	eq
 8003350:	61a3      	streq	r3, [r4, #24]
 8003352:	f000 f81f 	bl	8003394 <__sfp>
 8003356:	6060      	str	r0, [r4, #4]
 8003358:	4620      	mov	r0, r4
 800335a:	f000 f81b 	bl	8003394 <__sfp>
 800335e:	60a0      	str	r0, [r4, #8]
 8003360:	4620      	mov	r0, r4
 8003362:	f000 f817 	bl	8003394 <__sfp>
 8003366:	2200      	movs	r2, #0
 8003368:	2104      	movs	r1, #4
 800336a:	60e0      	str	r0, [r4, #12]
 800336c:	6860      	ldr	r0, [r4, #4]
 800336e:	f7ff ff81 	bl	8003274 <std>
 8003372:	2201      	movs	r2, #1
 8003374:	2109      	movs	r1, #9
 8003376:	68a0      	ldr	r0, [r4, #8]
 8003378:	f7ff ff7c 	bl	8003274 <std>
 800337c:	2202      	movs	r2, #2
 800337e:	2112      	movs	r1, #18
 8003380:	68e0      	ldr	r0, [r4, #12]
 8003382:	f7ff ff77 	bl	8003274 <std>
 8003386:	2301      	movs	r3, #1
 8003388:	61a3      	str	r3, [r4, #24]
 800338a:	e7d1      	b.n	8003330 <__sinit+0xc>
 800338c:	08003eec 	.word	0x08003eec
 8003390:	080032bd 	.word	0x080032bd

08003394 <__sfp>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	4607      	mov	r7, r0
 8003398:	f7ff ffac 	bl	80032f4 <__sfp_lock_acquire>
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <__sfp+0x84>)
 800339e:	681e      	ldr	r6, [r3, #0]
 80033a0:	69b3      	ldr	r3, [r6, #24]
 80033a2:	b913      	cbnz	r3, 80033aa <__sfp+0x16>
 80033a4:	4630      	mov	r0, r6
 80033a6:	f7ff ffbd 	bl	8003324 <__sinit>
 80033aa:	3648      	adds	r6, #72	; 0x48
 80033ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	d503      	bpl.n	80033bc <__sfp+0x28>
 80033b4:	6833      	ldr	r3, [r6, #0]
 80033b6:	b30b      	cbz	r3, 80033fc <__sfp+0x68>
 80033b8:	6836      	ldr	r6, [r6, #0]
 80033ba:	e7f7      	b.n	80033ac <__sfp+0x18>
 80033bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033c0:	b9d5      	cbnz	r5, 80033f8 <__sfp+0x64>
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <__sfp+0x88>)
 80033c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033c8:	60e3      	str	r3, [r4, #12]
 80033ca:	6665      	str	r5, [r4, #100]	; 0x64
 80033cc:	f000 f847 	bl	800345e <__retarget_lock_init_recursive>
 80033d0:	f7ff ff96 	bl	8003300 <__sfp_lock_release>
 80033d4:	2208      	movs	r2, #8
 80033d6:	4629      	mov	r1, r5
 80033d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033e0:	6025      	str	r5, [r4, #0]
 80033e2:	61a5      	str	r5, [r4, #24]
 80033e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033e8:	f7ff fcaa 	bl	8002d40 <memset>
 80033ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033f4:	4620      	mov	r0, r4
 80033f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f8:	3468      	adds	r4, #104	; 0x68
 80033fa:	e7d9      	b.n	80033b0 <__sfp+0x1c>
 80033fc:	2104      	movs	r1, #4
 80033fe:	4638      	mov	r0, r7
 8003400:	f7ff ff62 	bl	80032c8 <__sfmoreglue>
 8003404:	4604      	mov	r4, r0
 8003406:	6030      	str	r0, [r6, #0]
 8003408:	2800      	cmp	r0, #0
 800340a:	d1d5      	bne.n	80033b8 <__sfp+0x24>
 800340c:	f7ff ff78 	bl	8003300 <__sfp_lock_release>
 8003410:	230c      	movs	r3, #12
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	e7ee      	b.n	80033f4 <__sfp+0x60>
 8003416:	bf00      	nop
 8003418:	08003eec 	.word	0x08003eec
 800341c:	ffff0001 	.word	0xffff0001

08003420 <_fwalk_reent>:
 8003420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003424:	4606      	mov	r6, r0
 8003426:	4688      	mov	r8, r1
 8003428:	2700      	movs	r7, #0
 800342a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800342e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003432:	f1b9 0901 	subs.w	r9, r9, #1
 8003436:	d505      	bpl.n	8003444 <_fwalk_reent+0x24>
 8003438:	6824      	ldr	r4, [r4, #0]
 800343a:	2c00      	cmp	r4, #0
 800343c:	d1f7      	bne.n	800342e <_fwalk_reent+0xe>
 800343e:	4638      	mov	r0, r7
 8003440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003444:	89ab      	ldrh	r3, [r5, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d907      	bls.n	800345a <_fwalk_reent+0x3a>
 800344a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800344e:	3301      	adds	r3, #1
 8003450:	d003      	beq.n	800345a <_fwalk_reent+0x3a>
 8003452:	4629      	mov	r1, r5
 8003454:	4630      	mov	r0, r6
 8003456:	47c0      	blx	r8
 8003458:	4307      	orrs	r7, r0
 800345a:	3568      	adds	r5, #104	; 0x68
 800345c:	e7e9      	b.n	8003432 <_fwalk_reent+0x12>

0800345e <__retarget_lock_init_recursive>:
 800345e:	4770      	bx	lr

08003460 <__retarget_lock_acquire_recursive>:
 8003460:	4770      	bx	lr

08003462 <__retarget_lock_release_recursive>:
 8003462:	4770      	bx	lr

08003464 <__swhatbuf_r>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	460e      	mov	r6, r1
 8003468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800346c:	4614      	mov	r4, r2
 800346e:	2900      	cmp	r1, #0
 8003470:	461d      	mov	r5, r3
 8003472:	b096      	sub	sp, #88	; 0x58
 8003474:	da08      	bge.n	8003488 <__swhatbuf_r+0x24>
 8003476:	2200      	movs	r2, #0
 8003478:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800347c:	602a      	str	r2, [r5, #0]
 800347e:	061a      	lsls	r2, r3, #24
 8003480:	d410      	bmi.n	80034a4 <__swhatbuf_r+0x40>
 8003482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003486:	e00e      	b.n	80034a6 <__swhatbuf_r+0x42>
 8003488:	466a      	mov	r2, sp
 800348a:	f000 fc91 	bl	8003db0 <_fstat_r>
 800348e:	2800      	cmp	r0, #0
 8003490:	dbf1      	blt.n	8003476 <__swhatbuf_r+0x12>
 8003492:	9a01      	ldr	r2, [sp, #4]
 8003494:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003498:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800349c:	425a      	negs	r2, r3
 800349e:	415a      	adcs	r2, r3
 80034a0:	602a      	str	r2, [r5, #0]
 80034a2:	e7ee      	b.n	8003482 <__swhatbuf_r+0x1e>
 80034a4:	2340      	movs	r3, #64	; 0x40
 80034a6:	2000      	movs	r0, #0
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	b016      	add	sp, #88	; 0x58
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080034b0 <__smakebuf_r>:
 80034b0:	898b      	ldrh	r3, [r1, #12]
 80034b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034b4:	079d      	lsls	r5, r3, #30
 80034b6:	4606      	mov	r6, r0
 80034b8:	460c      	mov	r4, r1
 80034ba:	d507      	bpl.n	80034cc <__smakebuf_r+0x1c>
 80034bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	6123      	str	r3, [r4, #16]
 80034c4:	2301      	movs	r3, #1
 80034c6:	6163      	str	r3, [r4, #20]
 80034c8:	b002      	add	sp, #8
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	466a      	mov	r2, sp
 80034ce:	ab01      	add	r3, sp, #4
 80034d0:	f7ff ffc8 	bl	8003464 <__swhatbuf_r>
 80034d4:	9900      	ldr	r1, [sp, #0]
 80034d6:	4605      	mov	r5, r0
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 f891 	bl	8003600 <_malloc_r>
 80034de:	b948      	cbnz	r0, 80034f4 <__smakebuf_r+0x44>
 80034e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034e4:	059a      	lsls	r2, r3, #22
 80034e6:	d4ef      	bmi.n	80034c8 <__smakebuf_r+0x18>
 80034e8:	f023 0303 	bic.w	r3, r3, #3
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	81a3      	strh	r3, [r4, #12]
 80034f2:	e7e3      	b.n	80034bc <__smakebuf_r+0xc>
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <__smakebuf_r+0x7c>)
 80034f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	6020      	str	r0, [r4, #0]
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	9b00      	ldr	r3, [sp, #0]
 8003504:	6120      	str	r0, [r4, #16]
 8003506:	6163      	str	r3, [r4, #20]
 8003508:	9b01      	ldr	r3, [sp, #4]
 800350a:	b15b      	cbz	r3, 8003524 <__smakebuf_r+0x74>
 800350c:	4630      	mov	r0, r6
 800350e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003512:	f000 fc5f 	bl	8003dd4 <_isatty_r>
 8003516:	b128      	cbz	r0, 8003524 <__smakebuf_r+0x74>
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	81a3      	strh	r3, [r4, #12]
 8003524:	89a0      	ldrh	r0, [r4, #12]
 8003526:	4305      	orrs	r5, r0
 8003528:	81a5      	strh	r5, [r4, #12]
 800352a:	e7cd      	b.n	80034c8 <__smakebuf_r+0x18>
 800352c:	080032bd 	.word	0x080032bd

08003530 <_free_r>:
 8003530:	b538      	push	{r3, r4, r5, lr}
 8003532:	4605      	mov	r5, r0
 8003534:	2900      	cmp	r1, #0
 8003536:	d040      	beq.n	80035ba <_free_r+0x8a>
 8003538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353c:	1f0c      	subs	r4, r1, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	bfb8      	it	lt
 8003542:	18e4      	addlt	r4, r4, r3
 8003544:	f000 fc76 	bl	8003e34 <__malloc_lock>
 8003548:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <_free_r+0x8c>)
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	b933      	cbnz	r3, 800355c <_free_r+0x2c>
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	6014      	str	r4, [r2, #0]
 8003552:	4628      	mov	r0, r5
 8003554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003558:	f000 bc72 	b.w	8003e40 <__malloc_unlock>
 800355c:	42a3      	cmp	r3, r4
 800355e:	d908      	bls.n	8003572 <_free_r+0x42>
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	1821      	adds	r1, r4, r0
 8003564:	428b      	cmp	r3, r1
 8003566:	bf01      	itttt	eq
 8003568:	6819      	ldreq	r1, [r3, #0]
 800356a:	685b      	ldreq	r3, [r3, #4]
 800356c:	1809      	addeq	r1, r1, r0
 800356e:	6021      	streq	r1, [r4, #0]
 8003570:	e7ed      	b.n	800354e <_free_r+0x1e>
 8003572:	461a      	mov	r2, r3
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	b10b      	cbz	r3, 800357c <_free_r+0x4c>
 8003578:	42a3      	cmp	r3, r4
 800357a:	d9fa      	bls.n	8003572 <_free_r+0x42>
 800357c:	6811      	ldr	r1, [r2, #0]
 800357e:	1850      	adds	r0, r2, r1
 8003580:	42a0      	cmp	r0, r4
 8003582:	d10b      	bne.n	800359c <_free_r+0x6c>
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	4401      	add	r1, r0
 8003588:	1850      	adds	r0, r2, r1
 800358a:	4283      	cmp	r3, r0
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	d1e0      	bne.n	8003552 <_free_r+0x22>
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4401      	add	r1, r0
 8003596:	6011      	str	r1, [r2, #0]
 8003598:	6053      	str	r3, [r2, #4]
 800359a:	e7da      	b.n	8003552 <_free_r+0x22>
 800359c:	d902      	bls.n	80035a4 <_free_r+0x74>
 800359e:	230c      	movs	r3, #12
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	e7d6      	b.n	8003552 <_free_r+0x22>
 80035a4:	6820      	ldr	r0, [r4, #0]
 80035a6:	1821      	adds	r1, r4, r0
 80035a8:	428b      	cmp	r3, r1
 80035aa:	bf01      	itttt	eq
 80035ac:	6819      	ldreq	r1, [r3, #0]
 80035ae:	685b      	ldreq	r3, [r3, #4]
 80035b0:	1809      	addeq	r1, r1, r0
 80035b2:	6021      	streq	r1, [r4, #0]
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	6054      	str	r4, [r2, #4]
 80035b8:	e7cb      	b.n	8003552 <_free_r+0x22>
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	200004c4 	.word	0x200004c4

080035c0 <sbrk_aligned>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	4e0e      	ldr	r6, [pc, #56]	; (80035fc <sbrk_aligned+0x3c>)
 80035c4:	460c      	mov	r4, r1
 80035c6:	6831      	ldr	r1, [r6, #0]
 80035c8:	4605      	mov	r5, r0
 80035ca:	b911      	cbnz	r1, 80035d2 <sbrk_aligned+0x12>
 80035cc:	f000 fb7a 	bl	8003cc4 <_sbrk_r>
 80035d0:	6030      	str	r0, [r6, #0]
 80035d2:	4621      	mov	r1, r4
 80035d4:	4628      	mov	r0, r5
 80035d6:	f000 fb75 	bl	8003cc4 <_sbrk_r>
 80035da:	1c43      	adds	r3, r0, #1
 80035dc:	d00a      	beq.n	80035f4 <sbrk_aligned+0x34>
 80035de:	1cc4      	adds	r4, r0, #3
 80035e0:	f024 0403 	bic.w	r4, r4, #3
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d007      	beq.n	80035f8 <sbrk_aligned+0x38>
 80035e8:	1a21      	subs	r1, r4, r0
 80035ea:	4628      	mov	r0, r5
 80035ec:	f000 fb6a 	bl	8003cc4 <_sbrk_r>
 80035f0:	3001      	adds	r0, #1
 80035f2:	d101      	bne.n	80035f8 <sbrk_aligned+0x38>
 80035f4:	f04f 34ff 	mov.w	r4, #4294967295
 80035f8:	4620      	mov	r0, r4
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	200004c8 	.word	0x200004c8

08003600 <_malloc_r>:
 8003600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003604:	1ccd      	adds	r5, r1, #3
 8003606:	f025 0503 	bic.w	r5, r5, #3
 800360a:	3508      	adds	r5, #8
 800360c:	2d0c      	cmp	r5, #12
 800360e:	bf38      	it	cc
 8003610:	250c      	movcc	r5, #12
 8003612:	2d00      	cmp	r5, #0
 8003614:	4607      	mov	r7, r0
 8003616:	db01      	blt.n	800361c <_malloc_r+0x1c>
 8003618:	42a9      	cmp	r1, r5
 800361a:	d905      	bls.n	8003628 <_malloc_r+0x28>
 800361c:	230c      	movs	r3, #12
 800361e:	2600      	movs	r6, #0
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4630      	mov	r0, r6
 8003624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003628:	4e2e      	ldr	r6, [pc, #184]	; (80036e4 <_malloc_r+0xe4>)
 800362a:	f000 fc03 	bl	8003e34 <__malloc_lock>
 800362e:	6833      	ldr	r3, [r6, #0]
 8003630:	461c      	mov	r4, r3
 8003632:	bb34      	cbnz	r4, 8003682 <_malloc_r+0x82>
 8003634:	4629      	mov	r1, r5
 8003636:	4638      	mov	r0, r7
 8003638:	f7ff ffc2 	bl	80035c0 <sbrk_aligned>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	4604      	mov	r4, r0
 8003640:	d14d      	bne.n	80036de <_malloc_r+0xde>
 8003642:	6834      	ldr	r4, [r6, #0]
 8003644:	4626      	mov	r6, r4
 8003646:	2e00      	cmp	r6, #0
 8003648:	d140      	bne.n	80036cc <_malloc_r+0xcc>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	4631      	mov	r1, r6
 800364e:	4638      	mov	r0, r7
 8003650:	eb04 0803 	add.w	r8, r4, r3
 8003654:	f000 fb36 	bl	8003cc4 <_sbrk_r>
 8003658:	4580      	cmp	r8, r0
 800365a:	d13a      	bne.n	80036d2 <_malloc_r+0xd2>
 800365c:	6821      	ldr	r1, [r4, #0]
 800365e:	3503      	adds	r5, #3
 8003660:	1a6d      	subs	r5, r5, r1
 8003662:	f025 0503 	bic.w	r5, r5, #3
 8003666:	3508      	adds	r5, #8
 8003668:	2d0c      	cmp	r5, #12
 800366a:	bf38      	it	cc
 800366c:	250c      	movcc	r5, #12
 800366e:	4638      	mov	r0, r7
 8003670:	4629      	mov	r1, r5
 8003672:	f7ff ffa5 	bl	80035c0 <sbrk_aligned>
 8003676:	3001      	adds	r0, #1
 8003678:	d02b      	beq.n	80036d2 <_malloc_r+0xd2>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	442b      	add	r3, r5
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	e00e      	b.n	80036a0 <_malloc_r+0xa0>
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	1b52      	subs	r2, r2, r5
 8003686:	d41e      	bmi.n	80036c6 <_malloc_r+0xc6>
 8003688:	2a0b      	cmp	r2, #11
 800368a:	d916      	bls.n	80036ba <_malloc_r+0xba>
 800368c:	1961      	adds	r1, r4, r5
 800368e:	42a3      	cmp	r3, r4
 8003690:	6025      	str	r5, [r4, #0]
 8003692:	bf18      	it	ne
 8003694:	6059      	strne	r1, [r3, #4]
 8003696:	6863      	ldr	r3, [r4, #4]
 8003698:	bf08      	it	eq
 800369a:	6031      	streq	r1, [r6, #0]
 800369c:	5162      	str	r2, [r4, r5]
 800369e:	604b      	str	r3, [r1, #4]
 80036a0:	4638      	mov	r0, r7
 80036a2:	f104 060b 	add.w	r6, r4, #11
 80036a6:	f000 fbcb 	bl	8003e40 <__malloc_unlock>
 80036aa:	f026 0607 	bic.w	r6, r6, #7
 80036ae:	1d23      	adds	r3, r4, #4
 80036b0:	1af2      	subs	r2, r6, r3
 80036b2:	d0b6      	beq.n	8003622 <_malloc_r+0x22>
 80036b4:	1b9b      	subs	r3, r3, r6
 80036b6:	50a3      	str	r3, [r4, r2]
 80036b8:	e7b3      	b.n	8003622 <_malloc_r+0x22>
 80036ba:	6862      	ldr	r2, [r4, #4]
 80036bc:	42a3      	cmp	r3, r4
 80036be:	bf0c      	ite	eq
 80036c0:	6032      	streq	r2, [r6, #0]
 80036c2:	605a      	strne	r2, [r3, #4]
 80036c4:	e7ec      	b.n	80036a0 <_malloc_r+0xa0>
 80036c6:	4623      	mov	r3, r4
 80036c8:	6864      	ldr	r4, [r4, #4]
 80036ca:	e7b2      	b.n	8003632 <_malloc_r+0x32>
 80036cc:	4634      	mov	r4, r6
 80036ce:	6876      	ldr	r6, [r6, #4]
 80036d0:	e7b9      	b.n	8003646 <_malloc_r+0x46>
 80036d2:	230c      	movs	r3, #12
 80036d4:	4638      	mov	r0, r7
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	f000 fbb2 	bl	8003e40 <__malloc_unlock>
 80036dc:	e7a1      	b.n	8003622 <_malloc_r+0x22>
 80036de:	6025      	str	r5, [r4, #0]
 80036e0:	e7de      	b.n	80036a0 <_malloc_r+0xa0>
 80036e2:	bf00      	nop
 80036e4:	200004c4 	.word	0x200004c4

080036e8 <__sfputc_r>:
 80036e8:	6893      	ldr	r3, [r2, #8]
 80036ea:	b410      	push	{r4}
 80036ec:	3b01      	subs	r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	6093      	str	r3, [r2, #8]
 80036f2:	da07      	bge.n	8003704 <__sfputc_r+0x1c>
 80036f4:	6994      	ldr	r4, [r2, #24]
 80036f6:	42a3      	cmp	r3, r4
 80036f8:	db01      	blt.n	80036fe <__sfputc_r+0x16>
 80036fa:	290a      	cmp	r1, #10
 80036fc:	d102      	bne.n	8003704 <__sfputc_r+0x1c>
 80036fe:	bc10      	pop	{r4}
 8003700:	f7ff bc3a 	b.w	8002f78 <__swbuf_r>
 8003704:	6813      	ldr	r3, [r2, #0]
 8003706:	1c58      	adds	r0, r3, #1
 8003708:	6010      	str	r0, [r2, #0]
 800370a:	7019      	strb	r1, [r3, #0]
 800370c:	4608      	mov	r0, r1
 800370e:	bc10      	pop	{r4}
 8003710:	4770      	bx	lr

08003712 <__sfputs_r>:
 8003712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003714:	4606      	mov	r6, r0
 8003716:	460f      	mov	r7, r1
 8003718:	4614      	mov	r4, r2
 800371a:	18d5      	adds	r5, r2, r3
 800371c:	42ac      	cmp	r4, r5
 800371e:	d101      	bne.n	8003724 <__sfputs_r+0x12>
 8003720:	2000      	movs	r0, #0
 8003722:	e007      	b.n	8003734 <__sfputs_r+0x22>
 8003724:	463a      	mov	r2, r7
 8003726:	4630      	mov	r0, r6
 8003728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800372c:	f7ff ffdc 	bl	80036e8 <__sfputc_r>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d1f3      	bne.n	800371c <__sfputs_r+0xa>
 8003734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003738 <_vfiprintf_r>:
 8003738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373c:	460d      	mov	r5, r1
 800373e:	4614      	mov	r4, r2
 8003740:	4698      	mov	r8, r3
 8003742:	4606      	mov	r6, r0
 8003744:	b09d      	sub	sp, #116	; 0x74
 8003746:	b118      	cbz	r0, 8003750 <_vfiprintf_r+0x18>
 8003748:	6983      	ldr	r3, [r0, #24]
 800374a:	b90b      	cbnz	r3, 8003750 <_vfiprintf_r+0x18>
 800374c:	f7ff fdea 	bl	8003324 <__sinit>
 8003750:	4b89      	ldr	r3, [pc, #548]	; (8003978 <_vfiprintf_r+0x240>)
 8003752:	429d      	cmp	r5, r3
 8003754:	d11b      	bne.n	800378e <_vfiprintf_r+0x56>
 8003756:	6875      	ldr	r5, [r6, #4]
 8003758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800375a:	07d9      	lsls	r1, r3, #31
 800375c:	d405      	bmi.n	800376a <_vfiprintf_r+0x32>
 800375e:	89ab      	ldrh	r3, [r5, #12]
 8003760:	059a      	lsls	r2, r3, #22
 8003762:	d402      	bmi.n	800376a <_vfiprintf_r+0x32>
 8003764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003766:	f7ff fe7b 	bl	8003460 <__retarget_lock_acquire_recursive>
 800376a:	89ab      	ldrh	r3, [r5, #12]
 800376c:	071b      	lsls	r3, r3, #28
 800376e:	d501      	bpl.n	8003774 <_vfiprintf_r+0x3c>
 8003770:	692b      	ldr	r3, [r5, #16]
 8003772:	b9eb      	cbnz	r3, 80037b0 <_vfiprintf_r+0x78>
 8003774:	4629      	mov	r1, r5
 8003776:	4630      	mov	r0, r6
 8003778:	f7ff fc50 	bl	800301c <__swsetup_r>
 800377c:	b1c0      	cbz	r0, 80037b0 <_vfiprintf_r+0x78>
 800377e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003780:	07dc      	lsls	r4, r3, #31
 8003782:	d50e      	bpl.n	80037a2 <_vfiprintf_r+0x6a>
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	b01d      	add	sp, #116	; 0x74
 800378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378e:	4b7b      	ldr	r3, [pc, #492]	; (800397c <_vfiprintf_r+0x244>)
 8003790:	429d      	cmp	r5, r3
 8003792:	d101      	bne.n	8003798 <_vfiprintf_r+0x60>
 8003794:	68b5      	ldr	r5, [r6, #8]
 8003796:	e7df      	b.n	8003758 <_vfiprintf_r+0x20>
 8003798:	4b79      	ldr	r3, [pc, #484]	; (8003980 <_vfiprintf_r+0x248>)
 800379a:	429d      	cmp	r5, r3
 800379c:	bf08      	it	eq
 800379e:	68f5      	ldreq	r5, [r6, #12]
 80037a0:	e7da      	b.n	8003758 <_vfiprintf_r+0x20>
 80037a2:	89ab      	ldrh	r3, [r5, #12]
 80037a4:	0598      	lsls	r0, r3, #22
 80037a6:	d4ed      	bmi.n	8003784 <_vfiprintf_r+0x4c>
 80037a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037aa:	f7ff fe5a 	bl	8003462 <__retarget_lock_release_recursive>
 80037ae:	e7e9      	b.n	8003784 <_vfiprintf_r+0x4c>
 80037b0:	2300      	movs	r3, #0
 80037b2:	9309      	str	r3, [sp, #36]	; 0x24
 80037b4:	2320      	movs	r3, #32
 80037b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037ba:	2330      	movs	r3, #48	; 0x30
 80037bc:	f04f 0901 	mov.w	r9, #1
 80037c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003984 <_vfiprintf_r+0x24c>
 80037c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037cc:	4623      	mov	r3, r4
 80037ce:	469a      	mov	sl, r3
 80037d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037d4:	b10a      	cbz	r2, 80037da <_vfiprintf_r+0xa2>
 80037d6:	2a25      	cmp	r2, #37	; 0x25
 80037d8:	d1f9      	bne.n	80037ce <_vfiprintf_r+0x96>
 80037da:	ebba 0b04 	subs.w	fp, sl, r4
 80037de:	d00b      	beq.n	80037f8 <_vfiprintf_r+0xc0>
 80037e0:	465b      	mov	r3, fp
 80037e2:	4622      	mov	r2, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7ff ff93 	bl	8003712 <__sfputs_r>
 80037ec:	3001      	adds	r0, #1
 80037ee:	f000 80aa 	beq.w	8003946 <_vfiprintf_r+0x20e>
 80037f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037f4:	445a      	add	r2, fp
 80037f6:	9209      	str	r2, [sp, #36]	; 0x24
 80037f8:	f89a 3000 	ldrb.w	r3, [sl]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80a2 	beq.w	8003946 <_vfiprintf_r+0x20e>
 8003802:	2300      	movs	r3, #0
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800380c:	f10a 0a01 	add.w	sl, sl, #1
 8003810:	9304      	str	r3, [sp, #16]
 8003812:	9307      	str	r3, [sp, #28]
 8003814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003818:	931a      	str	r3, [sp, #104]	; 0x68
 800381a:	4654      	mov	r4, sl
 800381c:	2205      	movs	r2, #5
 800381e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003822:	4858      	ldr	r0, [pc, #352]	; (8003984 <_vfiprintf_r+0x24c>)
 8003824:	f000 faf8 	bl	8003e18 <memchr>
 8003828:	9a04      	ldr	r2, [sp, #16]
 800382a:	b9d8      	cbnz	r0, 8003864 <_vfiprintf_r+0x12c>
 800382c:	06d1      	lsls	r1, r2, #27
 800382e:	bf44      	itt	mi
 8003830:	2320      	movmi	r3, #32
 8003832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003836:	0713      	lsls	r3, r2, #28
 8003838:	bf44      	itt	mi
 800383a:	232b      	movmi	r3, #43	; 0x2b
 800383c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003840:	f89a 3000 	ldrb.w	r3, [sl]
 8003844:	2b2a      	cmp	r3, #42	; 0x2a
 8003846:	d015      	beq.n	8003874 <_vfiprintf_r+0x13c>
 8003848:	4654      	mov	r4, sl
 800384a:	2000      	movs	r0, #0
 800384c:	f04f 0c0a 	mov.w	ip, #10
 8003850:	9a07      	ldr	r2, [sp, #28]
 8003852:	4621      	mov	r1, r4
 8003854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003858:	3b30      	subs	r3, #48	; 0x30
 800385a:	2b09      	cmp	r3, #9
 800385c:	d94e      	bls.n	80038fc <_vfiprintf_r+0x1c4>
 800385e:	b1b0      	cbz	r0, 800388e <_vfiprintf_r+0x156>
 8003860:	9207      	str	r2, [sp, #28]
 8003862:	e014      	b.n	800388e <_vfiprintf_r+0x156>
 8003864:	eba0 0308 	sub.w	r3, r0, r8
 8003868:	fa09 f303 	lsl.w	r3, r9, r3
 800386c:	4313      	orrs	r3, r2
 800386e:	46a2      	mov	sl, r4
 8003870:	9304      	str	r3, [sp, #16]
 8003872:	e7d2      	b.n	800381a <_vfiprintf_r+0xe2>
 8003874:	9b03      	ldr	r3, [sp, #12]
 8003876:	1d19      	adds	r1, r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	9103      	str	r1, [sp, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	bfbb      	ittet	lt
 8003880:	425b      	neglt	r3, r3
 8003882:	f042 0202 	orrlt.w	r2, r2, #2
 8003886:	9307      	strge	r3, [sp, #28]
 8003888:	9307      	strlt	r3, [sp, #28]
 800388a:	bfb8      	it	lt
 800388c:	9204      	strlt	r2, [sp, #16]
 800388e:	7823      	ldrb	r3, [r4, #0]
 8003890:	2b2e      	cmp	r3, #46	; 0x2e
 8003892:	d10c      	bne.n	80038ae <_vfiprintf_r+0x176>
 8003894:	7863      	ldrb	r3, [r4, #1]
 8003896:	2b2a      	cmp	r3, #42	; 0x2a
 8003898:	d135      	bne.n	8003906 <_vfiprintf_r+0x1ce>
 800389a:	9b03      	ldr	r3, [sp, #12]
 800389c:	3402      	adds	r4, #2
 800389e:	1d1a      	adds	r2, r3, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	9203      	str	r2, [sp, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bfb8      	it	lt
 80038a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80038ac:	9305      	str	r3, [sp, #20]
 80038ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003988 <_vfiprintf_r+0x250>
 80038b2:	2203      	movs	r2, #3
 80038b4:	4650      	mov	r0, sl
 80038b6:	7821      	ldrb	r1, [r4, #0]
 80038b8:	f000 faae 	bl	8003e18 <memchr>
 80038bc:	b140      	cbz	r0, 80038d0 <_vfiprintf_r+0x198>
 80038be:	2340      	movs	r3, #64	; 0x40
 80038c0:	eba0 000a 	sub.w	r0, r0, sl
 80038c4:	fa03 f000 	lsl.w	r0, r3, r0
 80038c8:	9b04      	ldr	r3, [sp, #16]
 80038ca:	3401      	adds	r4, #1
 80038cc:	4303      	orrs	r3, r0
 80038ce:	9304      	str	r3, [sp, #16]
 80038d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d4:	2206      	movs	r2, #6
 80038d6:	482d      	ldr	r0, [pc, #180]	; (800398c <_vfiprintf_r+0x254>)
 80038d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038dc:	f000 fa9c 	bl	8003e18 <memchr>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d03f      	beq.n	8003964 <_vfiprintf_r+0x22c>
 80038e4:	4b2a      	ldr	r3, [pc, #168]	; (8003990 <_vfiprintf_r+0x258>)
 80038e6:	bb1b      	cbnz	r3, 8003930 <_vfiprintf_r+0x1f8>
 80038e8:	9b03      	ldr	r3, [sp, #12]
 80038ea:	3307      	adds	r3, #7
 80038ec:	f023 0307 	bic.w	r3, r3, #7
 80038f0:	3308      	adds	r3, #8
 80038f2:	9303      	str	r3, [sp, #12]
 80038f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f6:	443b      	add	r3, r7
 80038f8:	9309      	str	r3, [sp, #36]	; 0x24
 80038fa:	e767      	b.n	80037cc <_vfiprintf_r+0x94>
 80038fc:	460c      	mov	r4, r1
 80038fe:	2001      	movs	r0, #1
 8003900:	fb0c 3202 	mla	r2, ip, r2, r3
 8003904:	e7a5      	b.n	8003852 <_vfiprintf_r+0x11a>
 8003906:	2300      	movs	r3, #0
 8003908:	f04f 0c0a 	mov.w	ip, #10
 800390c:	4619      	mov	r1, r3
 800390e:	3401      	adds	r4, #1
 8003910:	9305      	str	r3, [sp, #20]
 8003912:	4620      	mov	r0, r4
 8003914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003918:	3a30      	subs	r2, #48	; 0x30
 800391a:	2a09      	cmp	r2, #9
 800391c:	d903      	bls.n	8003926 <_vfiprintf_r+0x1ee>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0c5      	beq.n	80038ae <_vfiprintf_r+0x176>
 8003922:	9105      	str	r1, [sp, #20]
 8003924:	e7c3      	b.n	80038ae <_vfiprintf_r+0x176>
 8003926:	4604      	mov	r4, r0
 8003928:	2301      	movs	r3, #1
 800392a:	fb0c 2101 	mla	r1, ip, r1, r2
 800392e:	e7f0      	b.n	8003912 <_vfiprintf_r+0x1da>
 8003930:	ab03      	add	r3, sp, #12
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	462a      	mov	r2, r5
 8003936:	4630      	mov	r0, r6
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <_vfiprintf_r+0x25c>)
 800393a:	a904      	add	r1, sp, #16
 800393c:	f3af 8000 	nop.w
 8003940:	4607      	mov	r7, r0
 8003942:	1c78      	adds	r0, r7, #1
 8003944:	d1d6      	bne.n	80038f4 <_vfiprintf_r+0x1bc>
 8003946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003948:	07d9      	lsls	r1, r3, #31
 800394a:	d405      	bmi.n	8003958 <_vfiprintf_r+0x220>
 800394c:	89ab      	ldrh	r3, [r5, #12]
 800394e:	059a      	lsls	r2, r3, #22
 8003950:	d402      	bmi.n	8003958 <_vfiprintf_r+0x220>
 8003952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003954:	f7ff fd85 	bl	8003462 <__retarget_lock_release_recursive>
 8003958:	89ab      	ldrh	r3, [r5, #12]
 800395a:	065b      	lsls	r3, r3, #25
 800395c:	f53f af12 	bmi.w	8003784 <_vfiprintf_r+0x4c>
 8003960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003962:	e711      	b.n	8003788 <_vfiprintf_r+0x50>
 8003964:	ab03      	add	r3, sp, #12
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	462a      	mov	r2, r5
 800396a:	4630      	mov	r0, r6
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <_vfiprintf_r+0x25c>)
 800396e:	a904      	add	r1, sp, #16
 8003970:	f000 f882 	bl	8003a78 <_printf_i>
 8003974:	e7e4      	b.n	8003940 <_vfiprintf_r+0x208>
 8003976:	bf00      	nop
 8003978:	08004014 	.word	0x08004014
 800397c:	08004034 	.word	0x08004034
 8003980:	08003ff4 	.word	0x08003ff4
 8003984:	08004054 	.word	0x08004054
 8003988:	0800405a 	.word	0x0800405a
 800398c:	0800405e 	.word	0x0800405e
 8003990:	00000000 	.word	0x00000000
 8003994:	08003713 	.word	0x08003713

08003998 <_printf_common>:
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	4616      	mov	r6, r2
 800399e:	4699      	mov	r9, r3
 80039a0:	688a      	ldr	r2, [r1, #8]
 80039a2:	690b      	ldr	r3, [r1, #16]
 80039a4:	4607      	mov	r7, r0
 80039a6:	4293      	cmp	r3, r2
 80039a8:	bfb8      	it	lt
 80039aa:	4613      	movlt	r3, r2
 80039ac:	6033      	str	r3, [r6, #0]
 80039ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039b2:	460c      	mov	r4, r1
 80039b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039b8:	b10a      	cbz	r2, 80039be <_printf_common+0x26>
 80039ba:	3301      	adds	r3, #1
 80039bc:	6033      	str	r3, [r6, #0]
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	0699      	lsls	r1, r3, #26
 80039c2:	bf42      	ittt	mi
 80039c4:	6833      	ldrmi	r3, [r6, #0]
 80039c6:	3302      	addmi	r3, #2
 80039c8:	6033      	strmi	r3, [r6, #0]
 80039ca:	6825      	ldr	r5, [r4, #0]
 80039cc:	f015 0506 	ands.w	r5, r5, #6
 80039d0:	d106      	bne.n	80039e0 <_printf_common+0x48>
 80039d2:	f104 0a19 	add.w	sl, r4, #25
 80039d6:	68e3      	ldr	r3, [r4, #12]
 80039d8:	6832      	ldr	r2, [r6, #0]
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	42ab      	cmp	r3, r5
 80039de:	dc28      	bgt.n	8003a32 <_printf_common+0x9a>
 80039e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039e4:	1e13      	subs	r3, r2, #0
 80039e6:	6822      	ldr	r2, [r4, #0]
 80039e8:	bf18      	it	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	0692      	lsls	r2, r2, #26
 80039ee:	d42d      	bmi.n	8003a4c <_printf_common+0xb4>
 80039f0:	4649      	mov	r1, r9
 80039f2:	4638      	mov	r0, r7
 80039f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039f8:	47c0      	blx	r8
 80039fa:	3001      	adds	r0, #1
 80039fc:	d020      	beq.n	8003a40 <_printf_common+0xa8>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	68e5      	ldr	r5, [r4, #12]
 8003a02:	f003 0306 	and.w	r3, r3, #6
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	bf18      	it	ne
 8003a0a:	2500      	movne	r5, #0
 8003a0c:	6832      	ldr	r2, [r6, #0]
 8003a0e:	f04f 0600 	mov.w	r6, #0
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	bf08      	it	eq
 8003a16:	1aad      	subeq	r5, r5, r2
 8003a18:	6922      	ldr	r2, [r4, #16]
 8003a1a:	bf08      	it	eq
 8003a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bfc4      	itt	gt
 8003a24:	1a9b      	subgt	r3, r3, r2
 8003a26:	18ed      	addgt	r5, r5, r3
 8003a28:	341a      	adds	r4, #26
 8003a2a:	42b5      	cmp	r5, r6
 8003a2c:	d11a      	bne.n	8003a64 <_printf_common+0xcc>
 8003a2e:	2000      	movs	r0, #0
 8003a30:	e008      	b.n	8003a44 <_printf_common+0xac>
 8003a32:	2301      	movs	r3, #1
 8003a34:	4652      	mov	r2, sl
 8003a36:	4649      	mov	r1, r9
 8003a38:	4638      	mov	r0, r7
 8003a3a:	47c0      	blx	r8
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d103      	bne.n	8003a48 <_printf_common+0xb0>
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
 8003a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a48:	3501      	adds	r5, #1
 8003a4a:	e7c4      	b.n	80039d6 <_printf_common+0x3e>
 8003a4c:	2030      	movs	r0, #48	; 0x30
 8003a4e:	18e1      	adds	r1, r4, r3
 8003a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a5a:	4422      	add	r2, r4
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a62:	e7c5      	b.n	80039f0 <_printf_common+0x58>
 8003a64:	2301      	movs	r3, #1
 8003a66:	4622      	mov	r2, r4
 8003a68:	4649      	mov	r1, r9
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	47c0      	blx	r8
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d0e6      	beq.n	8003a40 <_printf_common+0xa8>
 8003a72:	3601      	adds	r6, #1
 8003a74:	e7d9      	b.n	8003a2a <_printf_common+0x92>
	...

08003a78 <_printf_i>:
 8003a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7c:	7e0f      	ldrb	r7, [r1, #24]
 8003a7e:	4691      	mov	r9, r2
 8003a80:	2f78      	cmp	r7, #120	; 0x78
 8003a82:	4680      	mov	r8, r0
 8003a84:	460c      	mov	r4, r1
 8003a86:	469a      	mov	sl, r3
 8003a88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a8e:	d807      	bhi.n	8003aa0 <_printf_i+0x28>
 8003a90:	2f62      	cmp	r7, #98	; 0x62
 8003a92:	d80a      	bhi.n	8003aaa <_printf_i+0x32>
 8003a94:	2f00      	cmp	r7, #0
 8003a96:	f000 80d9 	beq.w	8003c4c <_printf_i+0x1d4>
 8003a9a:	2f58      	cmp	r7, #88	; 0x58
 8003a9c:	f000 80a4 	beq.w	8003be8 <_printf_i+0x170>
 8003aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003aa8:	e03a      	b.n	8003b20 <_printf_i+0xa8>
 8003aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003aae:	2b15      	cmp	r3, #21
 8003ab0:	d8f6      	bhi.n	8003aa0 <_printf_i+0x28>
 8003ab2:	a101      	add	r1, pc, #4	; (adr r1, 8003ab8 <_printf_i+0x40>)
 8003ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ab8:	08003b11 	.word	0x08003b11
 8003abc:	08003b25 	.word	0x08003b25
 8003ac0:	08003aa1 	.word	0x08003aa1
 8003ac4:	08003aa1 	.word	0x08003aa1
 8003ac8:	08003aa1 	.word	0x08003aa1
 8003acc:	08003aa1 	.word	0x08003aa1
 8003ad0:	08003b25 	.word	0x08003b25
 8003ad4:	08003aa1 	.word	0x08003aa1
 8003ad8:	08003aa1 	.word	0x08003aa1
 8003adc:	08003aa1 	.word	0x08003aa1
 8003ae0:	08003aa1 	.word	0x08003aa1
 8003ae4:	08003c33 	.word	0x08003c33
 8003ae8:	08003b55 	.word	0x08003b55
 8003aec:	08003c15 	.word	0x08003c15
 8003af0:	08003aa1 	.word	0x08003aa1
 8003af4:	08003aa1 	.word	0x08003aa1
 8003af8:	08003c55 	.word	0x08003c55
 8003afc:	08003aa1 	.word	0x08003aa1
 8003b00:	08003b55 	.word	0x08003b55
 8003b04:	08003aa1 	.word	0x08003aa1
 8003b08:	08003aa1 	.word	0x08003aa1
 8003b0c:	08003c1d 	.word	0x08003c1d
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	602a      	str	r2, [r5, #0]
 8003b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0a4      	b.n	8003c6e <_printf_i+0x1f6>
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	6829      	ldr	r1, [r5, #0]
 8003b28:	0606      	lsls	r6, r0, #24
 8003b2a:	f101 0304 	add.w	r3, r1, #4
 8003b2e:	d50a      	bpl.n	8003b46 <_printf_i+0xce>
 8003b30:	680e      	ldr	r6, [r1, #0]
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	2e00      	cmp	r6, #0
 8003b36:	da03      	bge.n	8003b40 <_printf_i+0xc8>
 8003b38:	232d      	movs	r3, #45	; 0x2d
 8003b3a:	4276      	negs	r6, r6
 8003b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b40:	230a      	movs	r3, #10
 8003b42:	485e      	ldr	r0, [pc, #376]	; (8003cbc <_printf_i+0x244>)
 8003b44:	e019      	b.n	8003b7a <_printf_i+0x102>
 8003b46:	680e      	ldr	r6, [r1, #0]
 8003b48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b4c:	602b      	str	r3, [r5, #0]
 8003b4e:	bf18      	it	ne
 8003b50:	b236      	sxthne	r6, r6
 8003b52:	e7ef      	b.n	8003b34 <_printf_i+0xbc>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	6820      	ldr	r0, [r4, #0]
 8003b58:	1d19      	adds	r1, r3, #4
 8003b5a:	6029      	str	r1, [r5, #0]
 8003b5c:	0601      	lsls	r1, r0, #24
 8003b5e:	d501      	bpl.n	8003b64 <_printf_i+0xec>
 8003b60:	681e      	ldr	r6, [r3, #0]
 8003b62:	e002      	b.n	8003b6a <_printf_i+0xf2>
 8003b64:	0646      	lsls	r6, r0, #25
 8003b66:	d5fb      	bpl.n	8003b60 <_printf_i+0xe8>
 8003b68:	881e      	ldrh	r6, [r3, #0]
 8003b6a:	2f6f      	cmp	r7, #111	; 0x6f
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2308      	moveq	r3, #8
 8003b70:	230a      	movne	r3, #10
 8003b72:	4852      	ldr	r0, [pc, #328]	; (8003cbc <_printf_i+0x244>)
 8003b74:	2100      	movs	r1, #0
 8003b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b7a:	6865      	ldr	r5, [r4, #4]
 8003b7c:	2d00      	cmp	r5, #0
 8003b7e:	bfa8      	it	ge
 8003b80:	6821      	ldrge	r1, [r4, #0]
 8003b82:	60a5      	str	r5, [r4, #8]
 8003b84:	bfa4      	itt	ge
 8003b86:	f021 0104 	bicge.w	r1, r1, #4
 8003b8a:	6021      	strge	r1, [r4, #0]
 8003b8c:	b90e      	cbnz	r6, 8003b92 <_printf_i+0x11a>
 8003b8e:	2d00      	cmp	r5, #0
 8003b90:	d04d      	beq.n	8003c2e <_printf_i+0x1b6>
 8003b92:	4615      	mov	r5, r2
 8003b94:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b98:	fb03 6711 	mls	r7, r3, r1, r6
 8003b9c:	5dc7      	ldrb	r7, [r0, r7]
 8003b9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ba2:	4637      	mov	r7, r6
 8003ba4:	42bb      	cmp	r3, r7
 8003ba6:	460e      	mov	r6, r1
 8003ba8:	d9f4      	bls.n	8003b94 <_printf_i+0x11c>
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d10b      	bne.n	8003bc6 <_printf_i+0x14e>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	07de      	lsls	r6, r3, #31
 8003bb2:	d508      	bpl.n	8003bc6 <_printf_i+0x14e>
 8003bb4:	6923      	ldr	r3, [r4, #16]
 8003bb6:	6861      	ldr	r1, [r4, #4]
 8003bb8:	4299      	cmp	r1, r3
 8003bba:	bfde      	ittt	le
 8003bbc:	2330      	movle	r3, #48	; 0x30
 8003bbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bc6:	1b52      	subs	r2, r2, r5
 8003bc8:	6122      	str	r2, [r4, #16]
 8003bca:	464b      	mov	r3, r9
 8003bcc:	4621      	mov	r1, r4
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f8cd a000 	str.w	sl, [sp]
 8003bd4:	aa03      	add	r2, sp, #12
 8003bd6:	f7ff fedf 	bl	8003998 <_printf_common>
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d14c      	bne.n	8003c78 <_printf_i+0x200>
 8003bde:	f04f 30ff 	mov.w	r0, #4294967295
 8003be2:	b004      	add	sp, #16
 8003be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be8:	4834      	ldr	r0, [pc, #208]	; (8003cbc <_printf_i+0x244>)
 8003bea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bee:	6829      	ldr	r1, [r5, #0]
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bf6:	6029      	str	r1, [r5, #0]
 8003bf8:	061d      	lsls	r5, r3, #24
 8003bfa:	d514      	bpl.n	8003c26 <_printf_i+0x1ae>
 8003bfc:	07df      	lsls	r7, r3, #31
 8003bfe:	bf44      	itt	mi
 8003c00:	f043 0320 	orrmi.w	r3, r3, #32
 8003c04:	6023      	strmi	r3, [r4, #0]
 8003c06:	b91e      	cbnz	r6, 8003c10 <_printf_i+0x198>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	f023 0320 	bic.w	r3, r3, #32
 8003c0e:	6023      	str	r3, [r4, #0]
 8003c10:	2310      	movs	r3, #16
 8003c12:	e7af      	b.n	8003b74 <_printf_i+0xfc>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	f043 0320 	orr.w	r3, r3, #32
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	2378      	movs	r3, #120	; 0x78
 8003c1e:	4828      	ldr	r0, [pc, #160]	; (8003cc0 <_printf_i+0x248>)
 8003c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c24:	e7e3      	b.n	8003bee <_printf_i+0x176>
 8003c26:	0659      	lsls	r1, r3, #25
 8003c28:	bf48      	it	mi
 8003c2a:	b2b6      	uxthmi	r6, r6
 8003c2c:	e7e6      	b.n	8003bfc <_printf_i+0x184>
 8003c2e:	4615      	mov	r5, r2
 8003c30:	e7bb      	b.n	8003baa <_printf_i+0x132>
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	6826      	ldr	r6, [r4, #0]
 8003c36:	1d18      	adds	r0, r3, #4
 8003c38:	6961      	ldr	r1, [r4, #20]
 8003c3a:	6028      	str	r0, [r5, #0]
 8003c3c:	0635      	lsls	r5, r6, #24
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	d501      	bpl.n	8003c46 <_printf_i+0x1ce>
 8003c42:	6019      	str	r1, [r3, #0]
 8003c44:	e002      	b.n	8003c4c <_printf_i+0x1d4>
 8003c46:	0670      	lsls	r0, r6, #25
 8003c48:	d5fb      	bpl.n	8003c42 <_printf_i+0x1ca>
 8003c4a:	8019      	strh	r1, [r3, #0]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4615      	mov	r5, r2
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	e7ba      	b.n	8003bca <_printf_i+0x152>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	2100      	movs	r1, #0
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	602a      	str	r2, [r5, #0]
 8003c5c:	681d      	ldr	r5, [r3, #0]
 8003c5e:	6862      	ldr	r2, [r4, #4]
 8003c60:	4628      	mov	r0, r5
 8003c62:	f000 f8d9 	bl	8003e18 <memchr>
 8003c66:	b108      	cbz	r0, 8003c6c <_printf_i+0x1f4>
 8003c68:	1b40      	subs	r0, r0, r5
 8003c6a:	6060      	str	r0, [r4, #4]
 8003c6c:	6863      	ldr	r3, [r4, #4]
 8003c6e:	6123      	str	r3, [r4, #16]
 8003c70:	2300      	movs	r3, #0
 8003c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c76:	e7a8      	b.n	8003bca <_printf_i+0x152>
 8003c78:	462a      	mov	r2, r5
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	47d0      	blx	sl
 8003c82:	3001      	adds	r0, #1
 8003c84:	d0ab      	beq.n	8003bde <_printf_i+0x166>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	079b      	lsls	r3, r3, #30
 8003c8a:	d413      	bmi.n	8003cb4 <_printf_i+0x23c>
 8003c8c:	68e0      	ldr	r0, [r4, #12]
 8003c8e:	9b03      	ldr	r3, [sp, #12]
 8003c90:	4298      	cmp	r0, r3
 8003c92:	bfb8      	it	lt
 8003c94:	4618      	movlt	r0, r3
 8003c96:	e7a4      	b.n	8003be2 <_printf_i+0x16a>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4632      	mov	r2, r6
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	47d0      	blx	sl
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d09b      	beq.n	8003bde <_printf_i+0x166>
 8003ca6:	3501      	adds	r5, #1
 8003ca8:	68e3      	ldr	r3, [r4, #12]
 8003caa:	9903      	ldr	r1, [sp, #12]
 8003cac:	1a5b      	subs	r3, r3, r1
 8003cae:	42ab      	cmp	r3, r5
 8003cb0:	dcf2      	bgt.n	8003c98 <_printf_i+0x220>
 8003cb2:	e7eb      	b.n	8003c8c <_printf_i+0x214>
 8003cb4:	2500      	movs	r5, #0
 8003cb6:	f104 0619 	add.w	r6, r4, #25
 8003cba:	e7f5      	b.n	8003ca8 <_printf_i+0x230>
 8003cbc:	08004065 	.word	0x08004065
 8003cc0:	08004076 	.word	0x08004076

08003cc4 <_sbrk_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4d05      	ldr	r5, [pc, #20]	; (8003ce0 <_sbrk_r+0x1c>)
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	f7fd f8ce 	bl	8000e70 <_sbrk>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_sbrk_r+0x1a>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_sbrk_r+0x1a>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	200004cc 	.word	0x200004cc

08003ce4 <__sread>:
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cec:	f000 f8ae 	bl	8003e4c <_read_r>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	bfab      	itete	ge
 8003cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cf8:	181b      	addge	r3, r3, r0
 8003cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cfe:	bfac      	ite	ge
 8003d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d02:	81a3      	strhlt	r3, [r4, #12]
 8003d04:	bd10      	pop	{r4, pc}

08003d06 <__swrite>:
 8003d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	461f      	mov	r7, r3
 8003d0c:	898b      	ldrh	r3, [r1, #12]
 8003d0e:	4605      	mov	r5, r0
 8003d10:	05db      	lsls	r3, r3, #23
 8003d12:	460c      	mov	r4, r1
 8003d14:	4616      	mov	r6, r2
 8003d16:	d505      	bpl.n	8003d24 <__swrite+0x1e>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d20:	f000 f868 	bl	8003df4 <_lseek_r>
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	4632      	mov	r2, r6
 8003d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d2c:	81a3      	strh	r3, [r4, #12]
 8003d2e:	4628      	mov	r0, r5
 8003d30:	463b      	mov	r3, r7
 8003d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3a:	f000 b817 	b.w	8003d6c <_write_r>

08003d3e <__sseek>:
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	460c      	mov	r4, r1
 8003d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d46:	f000 f855 	bl	8003df4 <_lseek_r>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	89a3      	ldrh	r3, [r4, #12]
 8003d4e:	bf15      	itete	ne
 8003d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d5a:	81a3      	strheq	r3, [r4, #12]
 8003d5c:	bf18      	it	ne
 8003d5e:	81a3      	strhne	r3, [r4, #12]
 8003d60:	bd10      	pop	{r4, pc}

08003d62 <__sclose>:
 8003d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d66:	f000 b813 	b.w	8003d90 <_close_r>
	...

08003d6c <_write_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4604      	mov	r4, r0
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	2200      	movs	r2, #0
 8003d76:	4d05      	ldr	r5, [pc, #20]	; (8003d8c <_write_r+0x20>)
 8003d78:	602a      	str	r2, [r5, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f7fd f82b 	bl	8000dd6 <_write>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d102      	bne.n	8003d8a <_write_r+0x1e>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	b103      	cbz	r3, 8003d8a <_write_r+0x1e>
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	200004cc 	.word	0x200004cc

08003d90 <_close_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	2300      	movs	r3, #0
 8003d94:	4d05      	ldr	r5, [pc, #20]	; (8003dac <_close_r+0x1c>)
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	f7fd f837 	bl	8000e0e <_close>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_close_r+0x1a>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_close_r+0x1a>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	200004cc 	.word	0x200004cc

08003db0 <_fstat_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	2300      	movs	r3, #0
 8003db4:	4d06      	ldr	r5, [pc, #24]	; (8003dd0 <_fstat_r+0x20>)
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	f7fd f831 	bl	8000e24 <_fstat>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d102      	bne.n	8003dcc <_fstat_r+0x1c>
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	b103      	cbz	r3, 8003dcc <_fstat_r+0x1c>
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	200004cc 	.word	0x200004cc

08003dd4 <_isatty_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	4d05      	ldr	r5, [pc, #20]	; (8003df0 <_isatty_r+0x1c>)
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	602b      	str	r3, [r5, #0]
 8003de0:	f7fd f82f 	bl	8000e42 <_isatty>
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	d102      	bne.n	8003dee <_isatty_r+0x1a>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	b103      	cbz	r3, 8003dee <_isatty_r+0x1a>
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	bd38      	pop	{r3, r4, r5, pc}
 8003df0:	200004cc 	.word	0x200004cc

08003df4 <_lseek_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4d05      	ldr	r5, [pc, #20]	; (8003e14 <_lseek_r+0x20>)
 8003e00:	602a      	str	r2, [r5, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f7fd f827 	bl	8000e56 <_lseek>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_lseek_r+0x1e>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_lseek_r+0x1e>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	200004cc 	.word	0x200004cc

08003e18 <memchr>:
 8003e18:	4603      	mov	r3, r0
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	b2c9      	uxtb	r1, r1
 8003e1e:	4402      	add	r2, r0
 8003e20:	4293      	cmp	r3, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	d101      	bne.n	8003e2a <memchr+0x12>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e003      	b.n	8003e32 <memchr+0x1a>
 8003e2a:	7804      	ldrb	r4, [r0, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	428c      	cmp	r4, r1
 8003e30:	d1f6      	bne.n	8003e20 <memchr+0x8>
 8003e32:	bd10      	pop	{r4, pc}

08003e34 <__malloc_lock>:
 8003e34:	4801      	ldr	r0, [pc, #4]	; (8003e3c <__malloc_lock+0x8>)
 8003e36:	f7ff bb13 	b.w	8003460 <__retarget_lock_acquire_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	200004c0 	.word	0x200004c0

08003e40 <__malloc_unlock>:
 8003e40:	4801      	ldr	r0, [pc, #4]	; (8003e48 <__malloc_unlock+0x8>)
 8003e42:	f7ff bb0e 	b.w	8003462 <__retarget_lock_release_recursive>
 8003e46:	bf00      	nop
 8003e48:	200004c0 	.word	0x200004c0

08003e4c <_read_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	2200      	movs	r2, #0
 8003e56:	4d05      	ldr	r5, [pc, #20]	; (8003e6c <_read_r+0x20>)
 8003e58:	602a      	str	r2, [r5, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f7fc ff9e 	bl	8000d9c <_read>
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	d102      	bne.n	8003e6a <_read_r+0x1e>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b103      	cbz	r3, 8003e6a <_read_r+0x1e>
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	200004cc 	.word	0x200004cc

08003e70 <_init>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr

08003e7c <_fini>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr
